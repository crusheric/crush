"use strict";
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.cloudStorage = void 0;
var getFields_1 = require("./fields/getFields");
// This is the admin plugin cloud-storage stubfile.
// It only extends the config that are required by the admin UI.
var cloudStorage = function (pluginOptions) {
    return function (incomingConfig) {
        var allCollectionOptions = pluginOptions.collections, enabled = pluginOptions.enabled;
        var config = __assign({}, incomingConfig);
        // Return early if disabled. Only webpack config mods are applied.
        if (enabled === false) {
            return config;
        }
        return __assign(__assign({}, config), { collections: (config.collections || []).map(function (existingCollection) {
                var options = allCollectionOptions[existingCollection.slug];
                if (options === null || options === void 0 ? void 0 : options.adapter) {
                    var fields = (0, getFields_1.getFields)({
                        collection: existingCollection,
                        prefix: options.prefix,
                    });
                    return __assign(__assign({}, existingCollection), { fields: fields });
                }
                return existingCollection;
            }) });
    };
};
exports.cloudStorage = cloudStorage;
//# sourceMappingURL=index.js.map