"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
Object.defineProperty(exports, "createGlobalVersion", {
    enumerable: true,
    get: function() {
        return createGlobalVersion;
    }
});
const _withSession = require("./withSession");
const createGlobalVersion = async function createGlobalVersion({ autosave, createdAt, globalSlug, parent, req = {}, updatedAt, versionData }) {
    const VersionModel = this.versions[globalSlug];
    const options = (0, _withSession.withSession)(this, req.transactionID);
    const [doc] = await VersionModel.create([
        {
            autosave,
            createdAt,
            latest: true,
            parent,
            updatedAt,
            version: versionData
        }
    ], options, req);
    await VersionModel.updateMany({
        $and: [
            {
                _id: {
                    $ne: doc._id
                }
            },
            {
                parent: {
                    $eq: parent
                }
            },
            {
                latest: {
                    $eq: true
                }
            }
        ]
    }, {
        $unset: {
            latest: 1
        }
    }, options);
    const result = JSON.parse(JSON.stringify(doc));
    const verificationToken = doc._verificationToken;
    // custom id type reset
    result.id = result._id;
    if (verificationToken) {
        result._verificationToken = verificationToken;
    }
    return result;
};

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uL3NyYy9jcmVhdGVHbG9iYWxWZXJzaW9uLnRzIl0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB0eXBlIHsgQ3JlYXRlR2xvYmFsVmVyc2lvbiB9IGZyb20gJ3BheWxvYWQvZGF0YWJhc2UnXG5pbXBvcnQgdHlwZSB7IFBheWxvYWRSZXF1ZXN0IH0gZnJvbSAncGF5bG9hZC90eXBlcydcbmltcG9ydCB0eXBlIHsgRG9jdW1lbnQgfSBmcm9tICdwYXlsb2FkL3R5cGVzJ1xuXG5pbXBvcnQgdHlwZSB7IE1vbmdvb3NlQWRhcHRlciB9IGZyb20gJy4nXG5cbmltcG9ydCB7IHdpdGhTZXNzaW9uIH0gZnJvbSAnLi93aXRoU2Vzc2lvbidcblxuZXhwb3J0IGNvbnN0IGNyZWF0ZUdsb2JhbFZlcnNpb246IENyZWF0ZUdsb2JhbFZlcnNpb24gPSBhc3luYyBmdW5jdGlvbiBjcmVhdGVHbG9iYWxWZXJzaW9uKFxuICB0aGlzOiBNb25nb29zZUFkYXB0ZXIsXG4gIHsgYXV0b3NhdmUsIGNyZWF0ZWRBdCwgZ2xvYmFsU2x1ZywgcGFyZW50LCByZXEgPSB7fSBhcyBQYXlsb2FkUmVxdWVzdCwgdXBkYXRlZEF0LCB2ZXJzaW9uRGF0YSB9LFxuKSB7XG4gIGNvbnN0IFZlcnNpb25Nb2RlbCA9IHRoaXMudmVyc2lvbnNbZ2xvYmFsU2x1Z11cbiAgY29uc3Qgb3B0aW9ucyA9IHdpdGhTZXNzaW9uKHRoaXMsIHJlcS50cmFuc2FjdGlvbklEKVxuXG4gIGNvbnN0IFtkb2NdID0gYXdhaXQgVmVyc2lvbk1vZGVsLmNyZWF0ZShcbiAgICBbXG4gICAgICB7XG4gICAgICAgIGF1dG9zYXZlLFxuICAgICAgICBjcmVhdGVkQXQsXG4gICAgICAgIGxhdGVzdDogdHJ1ZSxcbiAgICAgICAgcGFyZW50LFxuICAgICAgICB1cGRhdGVkQXQsXG4gICAgICAgIHZlcnNpb246IHZlcnNpb25EYXRhLFxuICAgICAgfSxcbiAgICBdLFxuICAgIG9wdGlvbnMsXG4gICAgcmVxLFxuICApXG5cbiAgYXdhaXQgVmVyc2lvbk1vZGVsLnVwZGF0ZU1hbnkoXG4gICAge1xuICAgICAgJGFuZDogW1xuICAgICAgICB7XG4gICAgICAgICAgX2lkOiB7XG4gICAgICAgICAgICAkbmU6IGRvYy5faWQsXG4gICAgICAgICAgfSxcbiAgICAgICAgfSxcbiAgICAgICAge1xuICAgICAgICAgIHBhcmVudDoge1xuICAgICAgICAgICAgJGVxOiBwYXJlbnQsXG4gICAgICAgICAgfSxcbiAgICAgICAgfSxcbiAgICAgICAge1xuICAgICAgICAgIGxhdGVzdDoge1xuICAgICAgICAgICAgJGVxOiB0cnVlLFxuICAgICAgICAgIH0sXG4gICAgICAgIH0sXG4gICAgICBdLFxuICAgIH0sXG4gICAgeyAkdW5zZXQ6IHsgbGF0ZXN0OiAxIH0gfSxcbiAgICBvcHRpb25zLFxuICApXG5cbiAgY29uc3QgcmVzdWx0OiBEb2N1bWVudCA9IEpTT04ucGFyc2UoSlNPTi5zdHJpbmdpZnkoZG9jKSlcbiAgY29uc3QgdmVyaWZpY2F0aW9uVG9rZW4gPSBkb2MuX3ZlcmlmaWNhdGlvblRva2VuXG5cbiAgLy8gY3VzdG9tIGlkIHR5cGUgcmVzZXRcbiAgcmVzdWx0LmlkID0gcmVzdWx0Ll9pZFxuICBpZiAodmVyaWZpY2F0aW9uVG9rZW4pIHtcbiAgICByZXN1bHQuX3ZlcmlmaWNhdGlvblRva2VuID0gdmVyaWZpY2F0aW9uVG9rZW5cbiAgfVxuICByZXR1cm4gcmVzdWx0XG59XG4iXSwibmFtZXMiOlsiY3JlYXRlR2xvYmFsVmVyc2lvbiIsImF1dG9zYXZlIiwiY3JlYXRlZEF0IiwiZ2xvYmFsU2x1ZyIsInBhcmVudCIsInJlcSIsInVwZGF0ZWRBdCIsInZlcnNpb25EYXRhIiwiVmVyc2lvbk1vZGVsIiwidmVyc2lvbnMiLCJvcHRpb25zIiwid2l0aFNlc3Npb24iLCJ0cmFuc2FjdGlvbklEIiwiZG9jIiwiY3JlYXRlIiwibGF0ZXN0IiwidmVyc2lvbiIsInVwZGF0ZU1hbnkiLCIkYW5kIiwiX2lkIiwiJG5lIiwiJGVxIiwiJHVuc2V0IiwicmVzdWx0IiwiSlNPTiIsInBhcnNlIiwic3RyaW5naWZ5IiwidmVyaWZpY2F0aW9uVG9rZW4iLCJfdmVyaWZpY2F0aW9uVG9rZW4iLCJpZCJdLCJtYXBwaW5ncyI6Ijs7OzsrQkFRYUE7OztlQUFBQTs7OzZCQUZlO0FBRXJCLE1BQU1BLHNCQUEyQyxlQUFlQSxvQkFFckUsRUFBRUMsUUFBUSxFQUFFQyxTQUFTLEVBQUVDLFVBQVUsRUFBRUMsTUFBTSxFQUFFQyxNQUFNLENBQUMsQ0FBbUIsRUFBRUMsU0FBUyxFQUFFQyxXQUFXLEVBQUU7SUFFL0YsTUFBTUMsZUFBZSxJQUFJLENBQUNDLFFBQVEsQ0FBQ04sV0FBVztJQUM5QyxNQUFNTyxVQUFVQyxJQUFBQSx3QkFBVyxFQUFDLElBQUksRUFBRU4sSUFBSU8sYUFBYTtJQUVuRCxNQUFNLENBQUNDLElBQUksR0FBRyxNQUFNTCxhQUFhTSxNQUFNLENBQ3JDO1FBQ0U7WUFDRWI7WUFDQUM7WUFDQWEsUUFBUTtZQUNSWDtZQUNBRTtZQUNBVSxTQUFTVDtRQUNYO0tBQ0QsRUFDREcsU0FDQUw7SUFHRixNQUFNRyxhQUFhUyxVQUFVLENBQzNCO1FBQ0VDLE1BQU07WUFDSjtnQkFDRUMsS0FBSztvQkFDSEMsS0FBS1AsSUFBSU0sR0FBRztnQkFDZDtZQUNGO1lBQ0E7Z0JBQ0VmLFFBQVE7b0JBQ05pQixLQUFLakI7Z0JBQ1A7WUFDRjtZQUNBO2dCQUNFVyxRQUFRO29CQUNOTSxLQUFLO2dCQUNQO1lBQ0Y7U0FDRDtJQUNILEdBQ0E7UUFBRUMsUUFBUTtZQUFFUCxRQUFRO1FBQUU7SUFBRSxHQUN4Qkw7SUFHRixNQUFNYSxTQUFtQkMsS0FBS0MsS0FBSyxDQUFDRCxLQUFLRSxTQUFTLENBQUNiO0lBQ25ELE1BQU1jLG9CQUFvQmQsSUFBSWUsa0JBQWtCO0lBRWhELHVCQUF1QjtJQUN2QkwsT0FBT00sRUFBRSxHQUFHTixPQUFPSixHQUFHO0lBQ3RCLElBQUlRLG1CQUFtQjtRQUNyQkosT0FBT0ssa0JBQWtCLEdBQUdEO0lBQzlCO0lBQ0EsT0FBT0o7QUFDVCJ9