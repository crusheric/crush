"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
Object.defineProperty(exports, "queryDrafts", {
    enumerable: true,
    get: function() {
        return queryDrafts;
    }
});
const _database = require("payload/database");
const _buildSortParam = require("./queries/buildSortParam");
const _sanitizeInternalFields = /*#__PURE__*/ _interop_require_default(require("./utilities/sanitizeInternalFields"));
const _withSession = require("./withSession");
function _interop_require_default(obj) {
    return obj && obj.__esModule ? obj : {
        default: obj
    };
}
const queryDrafts = async function queryDrafts({ collection, limit, locale, page, pagination, req = {}, sort: sortArg, where }) {
    const VersionModel = this.versions[collection];
    const collectionConfig = this.payload.collections[collection].config;
    const options = (0, _withSession.withSession)(this, req.transactionID);
    let hasNearConstraint;
    let sort;
    if (where) {
        const constraints = (0, _database.flattenWhereToOperators)(where);
        hasNearConstraint = constraints.some((prop)=>Object.keys(prop).some((key)=>key === 'near'));
    }
    if (!hasNearConstraint) {
        sort = (0, _buildSortParam.buildSortParam)({
            config: this.payload.config,
            fields: collectionConfig.fields,
            locale,
            sort: sortArg || collectionConfig.defaultSort,
            timestamps: true
        });
    }
    const combinedWhere = (0, _database.combineQueries)({
        latest: {
            equals: true
        }
    }, where);
    const versionQuery = await VersionModel.buildQuery({
        locale,
        payload: this.payload,
        where: combinedWhere
    });
    // useEstimatedCount is faster, but not accurate, as it ignores any filters. It is thus set to true if there are no filters.
    const useEstimatedCount = hasNearConstraint || !versionQuery || Object.keys(versionQuery).length === 0;
    const paginationOptions = {
        forceCountFn: hasNearConstraint,
        lean: true,
        leanWithId: true,
        options,
        page,
        pagination,
        sort,
        useEstimatedCount
    };
    if (!useEstimatedCount && Object.keys(versionQuery).length === 0 && this.disableIndexHints !== true) {
        // Improve the performance of the countDocuments query which is used if useEstimatedCount is set to false by adding
        // a hint. By default, if no hint is provided, MongoDB does not use an indexed field to count the returned documents,
        // which makes queries very slow. This only happens when no query (filter) is provided. If one is provided, it uses
        // the correct indexed field
        paginationOptions.useCustomCountFn = ()=>{
            return Promise.resolve(VersionModel.countDocuments(versionQuery, {
                hint: {
                    _id: 1
                }
            }));
        };
    }
    if (limit > 0) {
        paginationOptions.limit = limit;
        // limit must also be set here, it's ignored when pagination is false
        paginationOptions.options.limit = limit;
    }
    const result = await VersionModel.paginate(versionQuery, paginationOptions);
    const docs = JSON.parse(JSON.stringify(result.docs));
    return {
        ...result,
        docs: docs.map((doc)=>{
            // eslint-disable-next-line no-param-reassign
            doc = {
                _id: doc.parent,
                id: doc.parent,
                ...doc.version,
                createdAt: doc.createdAt,
                updatedAt: doc.updatedAt
            };
            return (0, _sanitizeInternalFields.default)(doc);
        })
    };
};

//# sourceMappingURL=data:application/json;base64,