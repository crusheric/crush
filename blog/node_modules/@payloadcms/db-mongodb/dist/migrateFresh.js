"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
Object.defineProperty(exports, "migrateFresh", {
    enumerable: true,
    get: function() {
        return migrateFresh;
    }
});
const _database = require("payload/database");
const _commitTransaction = require("payload/dist/utilities/commitTransaction");
const _initTransaction = require("payload/dist/utilities/initTransaction");
const _killTransaction = require("payload/dist/utilities/killTransaction");
const _prompts = /*#__PURE__*/ _interop_require_default(require("prompts"));
function _interop_require_default(obj) {
    return obj && obj.__esModule ? obj : {
        default: obj
    };
}
async function migrateFresh() {
    const { payload } = this;
    const { confirm: acceptWarning } = await (0, _prompts.default)({
        name: 'confirm',
        type: 'confirm',
        initial: false,
        message: `WARNING: This will drop your database and run all migrations. Are you sure you want to proceed?`
    }, {
        onCancel: ()=>{
            process.exit(0);
        }
    });
    if (!acceptWarning) {
        process.exit(0);
    }
    payload.logger.info({
        msg: `Dropping database.`
    });
    await this.connection.dropDatabase();
    const migrationFiles = await (0, _database.readMigrationFiles)({
        payload
    });
    payload.logger.debug({
        msg: `Found ${migrationFiles.length} migration files.`
    });
    const req = {
        payload
    };
    // Run all migrate up
    for (const migration of migrationFiles){
        payload.logger.info({
            msg: `Migrating: ${migration.name}`
        });
        try {
            const start = Date.now();
            await (0, _initTransaction.initTransaction)(req);
            await migration.up({
                payload,
                req
            });
            await payload.create({
                collection: 'payload-migrations',
                data: {
                    name: migration.name,
                    batch: 1
                },
                req
            });
            await (0, _commitTransaction.commitTransaction)(req);
            payload.logger.info({
                msg: `Migrated:  ${migration.name} (${Date.now() - start}ms)`
            });
        } catch (err) {
            await (0, _killTransaction.killTransaction)(req);
            payload.logger.error({
                err,
                msg: `Error running migration ${migration.name}. Rolling back.`
            });
            throw err;
        }
    }
}

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uL3NyYy9taWdyYXRlRnJlc2gudHMiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHR5cGUgeyBQYXlsb2FkUmVxdWVzdCB9IGZyb20gJ3BheWxvYWQvdHlwZXMnXG5cbmltcG9ydCB7IHJlYWRNaWdyYXRpb25GaWxlcyB9IGZyb20gJ3BheWxvYWQvZGF0YWJhc2UnXG5pbXBvcnQgeyBjb21taXRUcmFuc2FjdGlvbiB9IGZyb20gJ3BheWxvYWQvZGlzdC91dGlsaXRpZXMvY29tbWl0VHJhbnNhY3Rpb24nXG5pbXBvcnQgeyBpbml0VHJhbnNhY3Rpb24gfSBmcm9tICdwYXlsb2FkL2Rpc3QvdXRpbGl0aWVzL2luaXRUcmFuc2FjdGlvbidcbmltcG9ydCB7IGtpbGxUcmFuc2FjdGlvbiB9IGZyb20gJ3BheWxvYWQvZGlzdC91dGlsaXRpZXMva2lsbFRyYW5zYWN0aW9uJ1xuaW1wb3J0IHByb21wdHMgZnJvbSAncHJvbXB0cydcblxuaW1wb3J0IHR5cGUgeyBNb25nb29zZUFkYXB0ZXIgfSBmcm9tICcuJ1xuXG4vKipcbiAqIERyb3AgdGhlIGN1cnJlbnQgZGF0YWJhc2UgYW5kIHJ1biBhbGwgbWlncmF0ZSB1cCBmdW5jdGlvbnNcbiAqL1xuZXhwb3J0IGFzeW5jIGZ1bmN0aW9uIG1pZ3JhdGVGcmVzaCh0aGlzOiBNb25nb29zZUFkYXB0ZXIpOiBQcm9taXNlPHZvaWQ+IHtcbiAgY29uc3QgeyBwYXlsb2FkIH0gPSB0aGlzXG5cbiAgY29uc3QgeyBjb25maXJtOiBhY2NlcHRXYXJuaW5nIH0gPSBhd2FpdCBwcm9tcHRzKFxuICAgIHtcbiAgICAgIG5hbWU6ICdjb25maXJtJyxcbiAgICAgIHR5cGU6ICdjb25maXJtJyxcbiAgICAgIGluaXRpYWw6IGZhbHNlLFxuICAgICAgbWVzc2FnZTogYFdBUk5JTkc6IFRoaXMgd2lsbCBkcm9wIHlvdXIgZGF0YWJhc2UgYW5kIHJ1biBhbGwgbWlncmF0aW9ucy4gQXJlIHlvdSBzdXJlIHlvdSB3YW50IHRvIHByb2NlZWQ/YCxcbiAgICB9LFxuICAgIHtcbiAgICAgIG9uQ2FuY2VsOiAoKSA9PiB7XG4gICAgICAgIHByb2Nlc3MuZXhpdCgwKVxuICAgICAgfSxcbiAgICB9LFxuICApXG5cbiAgaWYgKCFhY2NlcHRXYXJuaW5nKSB7XG4gICAgcHJvY2Vzcy5leGl0KDApXG4gIH1cblxuICBwYXlsb2FkLmxvZ2dlci5pbmZvKHtcbiAgICBtc2c6IGBEcm9wcGluZyBkYXRhYmFzZS5gLFxuICB9KVxuXG4gIGF3YWl0IHRoaXMuY29ubmVjdGlvbi5kcm9wRGF0YWJhc2UoKVxuXG4gIGNvbnN0IG1pZ3JhdGlvbkZpbGVzID0gYXdhaXQgcmVhZE1pZ3JhdGlvbkZpbGVzKHsgcGF5bG9hZCB9KVxuICBwYXlsb2FkLmxvZ2dlci5kZWJ1Zyh7XG4gICAgbXNnOiBgRm91bmQgJHttaWdyYXRpb25GaWxlcy5sZW5ndGh9IG1pZ3JhdGlvbiBmaWxlcy5gLFxuICB9KVxuXG4gIGNvbnN0IHJlcSA9IHsgcGF5bG9hZCB9IGFzIFBheWxvYWRSZXF1ZXN0XG5cbiAgLy8gUnVuIGFsbCBtaWdyYXRlIHVwXG4gIGZvciAoY29uc3QgbWlncmF0aW9uIG9mIG1pZ3JhdGlvbkZpbGVzKSB7XG4gICAgcGF5bG9hZC5sb2dnZXIuaW5mbyh7IG1zZzogYE1pZ3JhdGluZzogJHttaWdyYXRpb24ubmFtZX1gIH0pXG4gICAgdHJ5IHtcbiAgICAgIGNvbnN0IHN0YXJ0ID0gRGF0ZS5ub3coKVxuICAgICAgYXdhaXQgaW5pdFRyYW5zYWN0aW9uKHJlcSlcbiAgICAgIGF3YWl0IG1pZ3JhdGlvbi51cCh7IHBheWxvYWQsIHJlcSB9KVxuICAgICAgYXdhaXQgcGF5bG9hZC5jcmVhdGUoe1xuICAgICAgICBjb2xsZWN0aW9uOiAncGF5bG9hZC1taWdyYXRpb25zJyxcbiAgICAgICAgZGF0YToge1xuICAgICAgICAgIG5hbWU6IG1pZ3JhdGlvbi5uYW1lLFxuICAgICAgICAgIGJhdGNoOiAxLFxuICAgICAgICB9LFxuICAgICAgICByZXEsXG4gICAgICB9KVxuXG4gICAgICBhd2FpdCBjb21taXRUcmFuc2FjdGlvbihyZXEpXG5cbiAgICAgIHBheWxvYWQubG9nZ2VyLmluZm8oeyBtc2c6IGBNaWdyYXRlZDogICR7bWlncmF0aW9uLm5hbWV9ICgke0RhdGUubm93KCkgLSBzdGFydH1tcylgIH0pXG4gICAgfSBjYXRjaCAoZXJyOiB1bmtub3duKSB7XG4gICAgICBhd2FpdCBraWxsVHJhbnNhY3Rpb24ocmVxKVxuICAgICAgcGF5bG9hZC5sb2dnZXIuZXJyb3Ioe1xuICAgICAgICBlcnIsXG4gICAgICAgIG1zZzogYEVycm9yIHJ1bm5pbmcgbWlncmF0aW9uICR7bWlncmF0aW9uLm5hbWV9LiBSb2xsaW5nIGJhY2suYCxcbiAgICAgIH0pXG4gICAgICB0aHJvdyBlcnJcbiAgICB9XG4gIH1cbn1cbiJdLCJuYW1lcyI6WyJtaWdyYXRlRnJlc2giLCJwYXlsb2FkIiwiY29uZmlybSIsImFjY2VwdFdhcm5pbmciLCJwcm9tcHRzIiwibmFtZSIsInR5cGUiLCJpbml0aWFsIiwibWVzc2FnZSIsIm9uQ2FuY2VsIiwicHJvY2VzcyIsImV4aXQiLCJsb2dnZXIiLCJpbmZvIiwibXNnIiwiY29ubmVjdGlvbiIsImRyb3BEYXRhYmFzZSIsIm1pZ3JhdGlvbkZpbGVzIiwicmVhZE1pZ3JhdGlvbkZpbGVzIiwiZGVidWciLCJsZW5ndGgiLCJyZXEiLCJtaWdyYXRpb24iLCJzdGFydCIsIkRhdGUiLCJub3ciLCJpbml0VHJhbnNhY3Rpb24iLCJ1cCIsImNyZWF0ZSIsImNvbGxlY3Rpb24iLCJkYXRhIiwiYmF0Y2giLCJjb21taXRUcmFuc2FjdGlvbiIsImVyciIsImtpbGxUcmFuc2FjdGlvbiIsImVycm9yIl0sIm1hcHBpbmdzIjoiOzs7OytCQWFzQkE7OztlQUFBQTs7OzBCQVhhO21DQUNEO2lDQUNGO2lDQUNBO2dFQUNaOzs7Ozs7QUFPYixlQUFlQTtJQUNwQixNQUFNLEVBQUVDLE9BQU8sRUFBRSxHQUFHLElBQUk7SUFFeEIsTUFBTSxFQUFFQyxTQUFTQyxhQUFhLEVBQUUsR0FBRyxNQUFNQyxJQUFBQSxnQkFBTyxFQUM5QztRQUNFQyxNQUFNO1FBQ05DLE1BQU07UUFDTkMsU0FBUztRQUNUQyxTQUFTLENBQUMsK0ZBQStGLENBQUM7SUFDNUcsR0FDQTtRQUNFQyxVQUFVO1lBQ1JDLFFBQVFDLElBQUksQ0FBQztRQUNmO0lBQ0Y7SUFHRixJQUFJLENBQUNSLGVBQWU7UUFDbEJPLFFBQVFDLElBQUksQ0FBQztJQUNmO0lBRUFWLFFBQVFXLE1BQU0sQ0FBQ0MsSUFBSSxDQUFDO1FBQ2xCQyxLQUFLLENBQUMsa0JBQWtCLENBQUM7SUFDM0I7SUFFQSxNQUFNLElBQUksQ0FBQ0MsVUFBVSxDQUFDQyxZQUFZO0lBRWxDLE1BQU1DLGlCQUFpQixNQUFNQyxJQUFBQSw0QkFBa0IsRUFBQztRQUFFakI7SUFBUTtJQUMxREEsUUFBUVcsTUFBTSxDQUFDTyxLQUFLLENBQUM7UUFDbkJMLEtBQUssQ0FBQyxNQUFNLEVBQUVHLGVBQWVHLE1BQU0sQ0FBQyxpQkFBaUIsQ0FBQztJQUN4RDtJQUVBLE1BQU1DLE1BQU07UUFBRXBCO0lBQVE7SUFFdEIscUJBQXFCO0lBQ3JCLEtBQUssTUFBTXFCLGFBQWFMLGVBQWdCO1FBQ3RDaEIsUUFBUVcsTUFBTSxDQUFDQyxJQUFJLENBQUM7WUFBRUMsS0FBSyxDQUFDLFdBQVcsRUFBRVEsVUFBVWpCLElBQUksQ0FBQyxDQUFDO1FBQUM7UUFDMUQsSUFBSTtZQUNGLE1BQU1rQixRQUFRQyxLQUFLQyxHQUFHO1lBQ3RCLE1BQU1DLElBQUFBLGdDQUFlLEVBQUNMO1lBQ3RCLE1BQU1DLFVBQVVLLEVBQUUsQ0FBQztnQkFBRTFCO2dCQUFTb0I7WUFBSTtZQUNsQyxNQUFNcEIsUUFBUTJCLE1BQU0sQ0FBQztnQkFDbkJDLFlBQVk7Z0JBQ1pDLE1BQU07b0JBQ0p6QixNQUFNaUIsVUFBVWpCLElBQUk7b0JBQ3BCMEIsT0FBTztnQkFDVDtnQkFDQVY7WUFDRjtZQUVBLE1BQU1XLElBQUFBLG9DQUFpQixFQUFDWDtZQUV4QnBCLFFBQVFXLE1BQU0sQ0FBQ0MsSUFBSSxDQUFDO2dCQUFFQyxLQUFLLENBQUMsV0FBVyxFQUFFUSxVQUFVakIsSUFBSSxDQUFDLEVBQUUsRUFBRW1CLEtBQUtDLEdBQUcsS0FBS0YsTUFBTSxHQUFHLENBQUM7WUFBQztRQUN0RixFQUFFLE9BQU9VLEtBQWM7WUFDckIsTUFBTUMsSUFBQUEsZ0NBQWUsRUFBQ2I7WUFDdEJwQixRQUFRVyxNQUFNLENBQUN1QixLQUFLLENBQUM7Z0JBQ25CRjtnQkFDQW5CLEtBQUssQ0FBQyx3QkFBd0IsRUFBRVEsVUFBVWpCLElBQUksQ0FBQyxlQUFlLENBQUM7WUFDakU7WUFDQSxNQUFNNEI7UUFDUjtJQUNGO0FBQ0YifQ==