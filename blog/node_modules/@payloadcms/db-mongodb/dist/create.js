"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
Object.defineProperty(exports, "create", {
    enumerable: true,
    get: function() {
        return create;
    }
});
const _handleError = /*#__PURE__*/ _interop_require_default(require("./utilities/handleError"));
const _withSession = require("./withSession");
function _interop_require_default(obj) {
    return obj && obj.__esModule ? obj : {
        default: obj
    };
}
const create = async function create({ collection, data, req = {} }) {
    const Model = this.collections[collection];
    const options = (0, _withSession.withSession)(this, req.transactionID);
    let doc;
    try {
        [doc] = await Model.create([
            data
        ], options);
    } catch (error) {
        (0, _handleError.default)(error, req);
    }
    // doc.toJSON does not do stuff like converting ObjectIds to string, or date strings to date objects. That's why we use JSON.parse/stringify here
    const result = JSON.parse(JSON.stringify(doc));
    const verificationToken = doc._verificationToken;
    // custom id type reset
    result.id = result._id;
    if (verificationToken) {
        result._verificationToken = verificationToken;
    }
    return result;
};

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uL3NyYy9jcmVhdGUudHMiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHR5cGUgeyBDcmVhdGUgfSBmcm9tICdwYXlsb2FkL2RhdGFiYXNlJ1xuaW1wb3J0IHR5cGUgeyBEb2N1bWVudCwgUGF5bG9hZFJlcXVlc3QgfSBmcm9tICdwYXlsb2FkL3R5cGVzJ1xuXG5pbXBvcnQgdHlwZSB7IE1vbmdvb3NlQWRhcHRlciB9IGZyb20gJy4nXG5cbmltcG9ydCBoYW5kbGVFcnJvciBmcm9tICcuL3V0aWxpdGllcy9oYW5kbGVFcnJvcidcbmltcG9ydCB7IHdpdGhTZXNzaW9uIH0gZnJvbSAnLi93aXRoU2Vzc2lvbidcblxuZXhwb3J0IGNvbnN0IGNyZWF0ZTogQ3JlYXRlID0gYXN5bmMgZnVuY3Rpb24gY3JlYXRlKFxuICB0aGlzOiBNb25nb29zZUFkYXB0ZXIsXG4gIHsgY29sbGVjdGlvbiwgZGF0YSwgcmVxID0ge30gYXMgUGF5bG9hZFJlcXVlc3QgfSxcbikge1xuICBjb25zdCBNb2RlbCA9IHRoaXMuY29sbGVjdGlvbnNbY29sbGVjdGlvbl1cbiAgY29uc3Qgb3B0aW9ucyA9IHdpdGhTZXNzaW9uKHRoaXMsIHJlcS50cmFuc2FjdGlvbklEKVxuICBsZXQgZG9jXG4gIHRyeSB7XG4gICAgO1tkb2NdID0gYXdhaXQgTW9kZWwuY3JlYXRlKFtkYXRhXSwgb3B0aW9ucylcbiAgfSBjYXRjaCAoZXJyb3IpIHtcbiAgICBoYW5kbGVFcnJvcihlcnJvciwgcmVxKVxuICB9XG5cbiAgLy8gZG9jLnRvSlNPTiBkb2VzIG5vdCBkbyBzdHVmZiBsaWtlIGNvbnZlcnRpbmcgT2JqZWN0SWRzIHRvIHN0cmluZywgb3IgZGF0ZSBzdHJpbmdzIHRvIGRhdGUgb2JqZWN0cy4gVGhhdCdzIHdoeSB3ZSB1c2UgSlNPTi5wYXJzZS9zdHJpbmdpZnkgaGVyZVxuICBjb25zdCByZXN1bHQ6IERvY3VtZW50ID0gSlNPTi5wYXJzZShKU09OLnN0cmluZ2lmeShkb2MpKVxuICBjb25zdCB2ZXJpZmljYXRpb25Ub2tlbiA9IGRvYy5fdmVyaWZpY2F0aW9uVG9rZW5cblxuICAvLyBjdXN0b20gaWQgdHlwZSByZXNldFxuICByZXN1bHQuaWQgPSByZXN1bHQuX2lkXG4gIGlmICh2ZXJpZmljYXRpb25Ub2tlbikge1xuICAgIHJlc3VsdC5fdmVyaWZpY2F0aW9uVG9rZW4gPSB2ZXJpZmljYXRpb25Ub2tlblxuICB9XG5cbiAgcmV0dXJuIHJlc3VsdFxufVxuIl0sIm5hbWVzIjpbImNyZWF0ZSIsImNvbGxlY3Rpb24iLCJkYXRhIiwicmVxIiwiTW9kZWwiLCJjb2xsZWN0aW9ucyIsIm9wdGlvbnMiLCJ3aXRoU2Vzc2lvbiIsInRyYW5zYWN0aW9uSUQiLCJkb2MiLCJlcnJvciIsImhhbmRsZUVycm9yIiwicmVzdWx0IiwiSlNPTiIsInBhcnNlIiwic3RyaW5naWZ5IiwidmVyaWZpY2F0aW9uVG9rZW4iLCJfdmVyaWZpY2F0aW9uVG9rZW4iLCJpZCIsIl9pZCJdLCJtYXBwaW5ncyI6Ijs7OzsrQkFRYUE7OztlQUFBQTs7O29FQUhXOzZCQUNJOzs7Ozs7QUFFckIsTUFBTUEsU0FBaUIsZUFBZUEsT0FFM0MsRUFBRUMsVUFBVSxFQUFFQyxJQUFJLEVBQUVDLE1BQU0sQ0FBQyxDQUFtQixFQUFFO0lBRWhELE1BQU1DLFFBQVEsSUFBSSxDQUFDQyxXQUFXLENBQUNKLFdBQVc7SUFDMUMsTUFBTUssVUFBVUMsSUFBQUEsd0JBQVcsRUFBQyxJQUFJLEVBQUVKLElBQUlLLGFBQWE7SUFDbkQsSUFBSUM7SUFDSixJQUFJO1FBQ0QsQ0FBQ0EsSUFBSSxHQUFHLE1BQU1MLE1BQU1KLE1BQU0sQ0FBQztZQUFDRTtTQUFLLEVBQUVJO0lBQ3RDLEVBQUUsT0FBT0ksT0FBTztRQUNkQyxJQUFBQSxvQkFBVyxFQUFDRCxPQUFPUDtJQUNyQjtJQUVBLGlKQUFpSjtJQUNqSixNQUFNUyxTQUFtQkMsS0FBS0MsS0FBSyxDQUFDRCxLQUFLRSxTQUFTLENBQUNOO0lBQ25ELE1BQU1PLG9CQUFvQlAsSUFBSVEsa0JBQWtCO0lBRWhELHVCQUF1QjtJQUN2QkwsT0FBT00sRUFBRSxHQUFHTixPQUFPTyxHQUFHO0lBQ3RCLElBQUlILG1CQUFtQjtRQUNyQkosT0FBT0ssa0JBQWtCLEdBQUdEO0lBQzlCO0lBRUEsT0FBT0o7QUFDVCJ9