"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
Object.defineProperty(exports, "mongooseAdapter", {
    enumerable: true,
    get: function() {
        return mongooseAdapter;
    }
});
const _fs = /*#__PURE__*/ _interop_require_default(require("fs"));
const _mongoose = /*#__PURE__*/ _interop_require_default(require("mongoose"));
const _path = /*#__PURE__*/ _interop_require_default(require("path"));
const _database = require("payload/database");
const _connect = require("./connect");
const _create = require("./create");
const _createGlobal = require("./createGlobal");
const _createGlobalVersion = require("./createGlobalVersion");
const _createMigration = require("./createMigration");
const _createVersion = require("./createVersion");
const _deleteMany = require("./deleteMany");
const _deleteOne = require("./deleteOne");
const _deleteVersions = require("./deleteVersions");
const _destroy = require("./destroy");
const _find = require("./find");
const _findGlobal = require("./findGlobal");
const _findGlobalVersions = require("./findGlobalVersions");
const _findOne = require("./findOne");
const _findVersions = require("./findVersions");
const _init = require("./init");
const _migrateFresh = require("./migrateFresh");
const _queryDrafts = require("./queryDrafts");
const _beginTransaction = require("./transactions/beginTransaction");
const _commitTransaction = require("./transactions/commitTransaction");
const _rollbackTransaction = require("./transactions/rollbackTransaction");
const _updateGlobal = require("./updateGlobal");
const _updateGlobalVersion = require("./updateGlobalVersion");
const _updateOne = require("./updateOne");
const _updateVersion = require("./updateVersion");
function _interop_require_default(obj) {
    return obj && obj.__esModule ? obj : {
        default: obj
    };
}
function mongooseAdapter({ autoPluralization = true, connectOptions, disableIndexHints = false, migrationDir: migrationDirArg, transactionOptions = {}, url }) {
    function adapter({ payload }) {
        const migrationDir = findMigrationDir(migrationDirArg);
        _mongoose.default.set('strictQuery', false);
        return (0, _database.createDatabaseAdapter)({
            name: 'mongoose',
            // Mongoose-specific
            autoPluralization,
            collections: {},
            connectOptions: connectOptions || {},
            connection: undefined,
            disableIndexHints,
            globals: undefined,
            mongoMemoryServer: undefined,
            sessions: {},
            transactionOptions: transactionOptions === false ? undefined : transactionOptions,
            url,
            versions: {},
            // DatabaseAdapter
            beginTransaction: transactionOptions ? _beginTransaction.beginTransaction : undefined,
            commitTransaction: _commitTransaction.commitTransaction,
            connect: _connect.connect,
            create: _create.create,
            createGlobal: _createGlobal.createGlobal,
            createGlobalVersion: _createGlobalVersion.createGlobalVersion,
            createMigration: _createMigration.createMigration,
            createVersion: _createVersion.createVersion,
            defaultIDType: 'text',
            deleteMany: _deleteMany.deleteMany,
            deleteOne: _deleteOne.deleteOne,
            deleteVersions: _deleteVersions.deleteVersions,
            destroy: _destroy.destroy,
            find: _find.find,
            findGlobal: _findGlobal.findGlobal,
            findGlobalVersions: _findGlobalVersions.findGlobalVersions,
            findOne: _findOne.findOne,
            findVersions: _findVersions.findVersions,
            init: _init.init,
            migrateFresh: _migrateFresh.migrateFresh,
            migrationDir,
            payload,
            queryDrafts: _queryDrafts.queryDrafts,
            rollbackTransaction: _rollbackTransaction.rollbackTransaction,
            updateGlobal: _updateGlobal.updateGlobal,
            updateGlobalVersion: _updateGlobalVersion.updateGlobalVersion,
            updateOne: _updateOne.updateOne,
            updateVersion: _updateVersion.updateVersion
        });
    }
    return adapter;
}
/**
 * Attempt to find migrations directory.
 *
 * Checks for the following directories in order:
 * - `migrationDir` argument from Payload config
 * - `src/migrations`
 * - `dist/migrations`
 * - `migrations`
 *
 * Defaults to `src/migrations`
 *
 * @param migrationDir
 * @returns
 */ function findMigrationDir(migrationDir) {
    const cwd = process.cwd();
    const srcDir = _path.default.resolve(cwd, 'src/migrations');
    const distDir = _path.default.resolve(cwd, 'dist/migrations');
    const relativeMigrations = _path.default.resolve(cwd, 'migrations');
    // Use arg if provided
    if (migrationDir) return migrationDir;
    // Check other common locations
    if (_fs.default.existsSync(srcDir)) {
        return srcDir;
    }
    if (_fs.default.existsSync(distDir)) {
        return distDir;
    }
    if (_fs.default.existsSync(relativeMigrations)) {
        return relativeMigrations;
    }
    return srcDir;
}

//# sourceMappingURL=data:application/json;base64,