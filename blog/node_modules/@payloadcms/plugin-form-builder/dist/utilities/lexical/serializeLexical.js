"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
function _export(target, all) {
    for(var name in all)Object.defineProperty(target, name, {
        enumerable: true,
        get: all[name]
    });
}
_export(exports, {
    serializeLexical: function() {
        return serializeLexical;
    },
    convertLexicalNodesToHTML: function() {
        return convertLexicalNodesToHTML;
    }
});
const _defaultConverters = require("./defaultConverters");
async function serializeLexical(data, submissionData) {
    const converters = _defaultConverters.defaultHTMLConverters;
    if (data?.root?.children?.length) {
        return await convertLexicalNodesToHTML({
            converters,
            lexicalNodes: data?.root?.children,
            parent: data?.root,
            submissionData
        });
    }
    return '';
}
async function convertLexicalNodesToHTML({ converters, lexicalNodes, parent, submissionData }) {
    const unknownConverter = converters.find((converter)=>converter.nodeTypes.includes('unknown'));
    const htmlArray = await Promise.all(lexicalNodes.map(async (node, i)=>{
        const converterForNode = converters.find((converter)=>converter.nodeTypes.includes(node.type));
        if (!converterForNode) {
            if (unknownConverter) {
                return unknownConverter.converter({
                    childIndex: i,
                    converters,
                    node,
                    parent,
                    submissionData
                });
            }
            return '<span>unknown node</span>';
        }
        return converterForNode.converter({
            childIndex: i,
            converters,
            node,
            parent,
            submissionData
        });
    }));
    return htmlArray.join('') || '';
}

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uLy4uL3NyYy91dGlsaXRpZXMvbGV4aWNhbC9zZXJpYWxpemVMZXhpY2FsLnRzIl0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB0eXBlIHsgSFRNTENvbnZlcnRlciwgU2VyaWFsaXplZExleGljYWxOb2RlV2l0aFBhcmVudCB9IGZyb20gJy4vdHlwZXMnXG5cbmltcG9ydCB7IGRlZmF1bHRIVE1MQ29udmVydGVycyB9IGZyb20gJy4vZGVmYXVsdENvbnZlcnRlcnMnXG5cbmV4cG9ydCBhc3luYyBmdW5jdGlvbiBzZXJpYWxpemVMZXhpY2FsKGRhdGE/OiBhbnksIHN1Ym1pc3Npb25EYXRhPzogYW55KTogUHJvbWlzZTxzdHJpbmc+IHtcbiAgY29uc3QgY29udmVydGVyczogSFRNTENvbnZlcnRlcltdID0gZGVmYXVsdEhUTUxDb252ZXJ0ZXJzXG5cbiAgaWYgKGRhdGE/LnJvb3Q/LmNoaWxkcmVuPy5sZW5ndGgpIHtcbiAgICByZXR1cm4gYXdhaXQgY29udmVydExleGljYWxOb2Rlc1RvSFRNTCh7XG4gICAgICBjb252ZXJ0ZXJzLFxuICAgICAgbGV4aWNhbE5vZGVzOiBkYXRhPy5yb290Py5jaGlsZHJlbixcbiAgICAgIHBhcmVudDogZGF0YT8ucm9vdCxcbiAgICAgIHN1Ym1pc3Npb25EYXRhLFxuICAgIH0pXG4gIH1cbiAgcmV0dXJuICcnXG59XG5cbmV4cG9ydCBhc3luYyBmdW5jdGlvbiBjb252ZXJ0TGV4aWNhbE5vZGVzVG9IVE1MKHtcbiAgY29udmVydGVycyxcbiAgbGV4aWNhbE5vZGVzLFxuICBwYXJlbnQsXG4gIHN1Ym1pc3Npb25EYXRhLFxufToge1xuICBjb252ZXJ0ZXJzOiBIVE1MQ29udmVydGVyW11cbiAgbGV4aWNhbE5vZGVzOiBhbnlbXVxuICBwYXJlbnQ6IFNlcmlhbGl6ZWRMZXhpY2FsTm9kZVdpdGhQYXJlbnRcbiAgc3VibWlzc2lvbkRhdGE/OiBhbnlcbn0pOiBQcm9taXNlPHN0cmluZz4ge1xuICBjb25zdCB1bmtub3duQ29udmVydGVyID0gY29udmVydGVycy5maW5kKChjb252ZXJ0ZXIpID0+IGNvbnZlcnRlci5ub2RlVHlwZXMuaW5jbHVkZXMoJ3Vua25vd24nKSlcblxuICBjb25zdCBodG1sQXJyYXkgPSBhd2FpdCBQcm9taXNlLmFsbChcbiAgICBsZXhpY2FsTm9kZXMubWFwKGFzeW5jIChub2RlLCBpKSA9PiB7XG4gICAgICBjb25zdCBjb252ZXJ0ZXJGb3JOb2RlID0gY29udmVydGVycy5maW5kKChjb252ZXJ0ZXIpID0+XG4gICAgICAgIGNvbnZlcnRlci5ub2RlVHlwZXMuaW5jbHVkZXMobm9kZS50eXBlKSxcbiAgICAgIClcbiAgICAgIGlmICghY29udmVydGVyRm9yTm9kZSkge1xuICAgICAgICBpZiAodW5rbm93bkNvbnZlcnRlcikge1xuICAgICAgICAgIHJldHVybiB1bmtub3duQ29udmVydGVyLmNvbnZlcnRlcih7XG4gICAgICAgICAgICBjaGlsZEluZGV4OiBpLFxuICAgICAgICAgICAgY29udmVydGVycyxcbiAgICAgICAgICAgIG5vZGUsXG4gICAgICAgICAgICBwYXJlbnQsXG4gICAgICAgICAgICBzdWJtaXNzaW9uRGF0YSxcbiAgICAgICAgICB9KVxuICAgICAgICB9XG4gICAgICAgIHJldHVybiAnPHNwYW4+dW5rbm93biBub2RlPC9zcGFuPidcbiAgICAgIH1cblxuICAgICAgcmV0dXJuIGNvbnZlcnRlckZvck5vZGUuY29udmVydGVyKHtcbiAgICAgICAgY2hpbGRJbmRleDogaSxcbiAgICAgICAgY29udmVydGVycyxcbiAgICAgICAgbm9kZSxcbiAgICAgICAgcGFyZW50LFxuICAgICAgICBzdWJtaXNzaW9uRGF0YSxcbiAgICAgIH0pXG4gICAgfSksXG4gIClcblxuICByZXR1cm4gaHRtbEFycmF5LmpvaW4oJycpIHx8ICcnXG59XG4iXSwibmFtZXMiOlsic2VyaWFsaXplTGV4aWNhbCIsImNvbnZlcnRMZXhpY2FsTm9kZXNUb0hUTUwiLCJkYXRhIiwic3VibWlzc2lvbkRhdGEiLCJjb252ZXJ0ZXJzIiwiZGVmYXVsdEhUTUxDb252ZXJ0ZXJzIiwicm9vdCIsImNoaWxkcmVuIiwibGVuZ3RoIiwibGV4aWNhbE5vZGVzIiwicGFyZW50IiwidW5rbm93bkNvbnZlcnRlciIsImZpbmQiLCJjb252ZXJ0ZXIiLCJub2RlVHlwZXMiLCJpbmNsdWRlcyIsImh0bWxBcnJheSIsIlByb21pc2UiLCJhbGwiLCJtYXAiLCJub2RlIiwiaSIsImNvbnZlcnRlckZvck5vZGUiLCJ0eXBlIiwiY2hpbGRJbmRleCIsImpvaW4iXSwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7O0lBSXNCQSxnQkFBZ0I7ZUFBaEJBOztJQWNBQyx5QkFBeUI7ZUFBekJBOzs7bUNBaEJnQjtBQUUvQixlQUFlRCxpQkFBaUJFLElBQVUsRUFBRUMsY0FBb0I7SUFDckUsTUFBTUMsYUFBOEJDLHdDQUFxQjtJQUV6RCxJQUFJSCxNQUFNSSxNQUFNQyxVQUFVQyxRQUFRO1FBQ2hDLE9BQU8sTUFBTVAsMEJBQTBCO1lBQ3JDRztZQUNBSyxjQUFjUCxNQUFNSSxNQUFNQztZQUMxQkcsUUFBUVIsTUFBTUk7WUFDZEg7UUFDRjtJQUNGO0lBQ0EsT0FBTztBQUNUO0FBRU8sZUFBZUYsMEJBQTBCLEVBQzlDRyxVQUFVLEVBQ1ZLLFlBQVksRUFDWkMsTUFBTSxFQUNOUCxjQUFjLEVBTWY7SUFDQyxNQUFNUSxtQkFBbUJQLFdBQVdRLElBQUksQ0FBQyxDQUFDQyxZQUFjQSxVQUFVQyxTQUFTLENBQUNDLFFBQVEsQ0FBQztJQUVyRixNQUFNQyxZQUFZLE1BQU1DLFFBQVFDLEdBQUcsQ0FDakNULGFBQWFVLEdBQUcsQ0FBQyxPQUFPQyxNQUFNQztRQUM1QixNQUFNQyxtQkFBbUJsQixXQUFXUSxJQUFJLENBQUMsQ0FBQ0MsWUFDeENBLFVBQVVDLFNBQVMsQ0FBQ0MsUUFBUSxDQUFDSyxLQUFLRyxJQUFJO1FBRXhDLElBQUksQ0FBQ0Qsa0JBQWtCO1lBQ3JCLElBQUlYLGtCQUFrQjtnQkFDcEIsT0FBT0EsaUJBQWlCRSxTQUFTLENBQUM7b0JBQ2hDVyxZQUFZSDtvQkFDWmpCO29CQUNBZ0I7b0JBQ0FWO29CQUNBUDtnQkFDRjtZQUNGO1lBQ0EsT0FBTztRQUNUO1FBRUEsT0FBT21CLGlCQUFpQlQsU0FBUyxDQUFDO1lBQ2hDVyxZQUFZSDtZQUNaakI7WUFDQWdCO1lBQ0FWO1lBQ0FQO1FBQ0Y7SUFDRjtJQUdGLE9BQU9hLFVBQVVTLElBQUksQ0FBQyxPQUFPO0FBQy9CIn0=