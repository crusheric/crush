"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
Object.defineProperty(exports, "TextHTMLConverter", {
    enumerable: true,
    get: function() {
        return TextHTMLConverter;
    }
});
const _replaceDoubleCurlys = require("../../replaceDoubleCurlys");
const _nodeFormat = require("../nodeFormat");
const TextHTMLConverter = {
    converter ({ node, submissionData }) {
        let text = node.text;
        if (submissionData) {
            text = (0, _replaceDoubleCurlys.replaceDoubleCurlys)(text, submissionData);
        }
        if (node.format & _nodeFormat.NodeFormat.IS_BOLD) {
            text = `<strong>${text}</strong>`;
        }
        if (node.format & _nodeFormat.NodeFormat.IS_ITALIC) {
            text = `<em>${text}</em>`;
        }
        if (node.format & _nodeFormat.NodeFormat.IS_STRIKETHROUGH) {
            text = `<span style="text-decoration: line-through">${text}</span>`;
        }
        if (node.format & _nodeFormat.NodeFormat.IS_UNDERLINE) {
            text = `<span style="text-decoration: underline">${text}</span>`;
        }
        if (node.format & _nodeFormat.NodeFormat.IS_CODE) {
            text = `<code>${text}</code>`;
        }
        if (node.format & _nodeFormat.NodeFormat.IS_SUBSCRIPT) {
            text = `<sub>${text}</sub>`;
        }
        if (node.format & _nodeFormat.NodeFormat.IS_SUPERSCRIPT) {
            text = `<sup>${text}</sup>`;
        }
        return text;
    },
    nodeTypes: [
        'text'
    ]
};

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uL3NyYy91dGlsaXRpZXMvbGV4aWNhbC9jb252ZXJ0ZXJzL3RleHQudHMiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHR5cGUgeyBIVE1MQ29udmVydGVyIH0gZnJvbSAnLi4vdHlwZXMnXG5cbmltcG9ydCB7IHJlcGxhY2VEb3VibGVDdXJseXMgfSBmcm9tICcuLi8uLi9yZXBsYWNlRG91YmxlQ3VybHlzJ1xuaW1wb3J0IHsgTm9kZUZvcm1hdCB9IGZyb20gJy4uL25vZGVGb3JtYXQnXG5cbmV4cG9ydCBjb25zdCBUZXh0SFRNTENvbnZlcnRlcjogSFRNTENvbnZlcnRlcjxhbnk+ID0ge1xuICBjb252ZXJ0ZXIoeyBub2RlLCBzdWJtaXNzaW9uRGF0YSB9KSB7XG4gICAgbGV0IHRleHQgPSBub2RlLnRleHRcblxuICAgIGlmIChzdWJtaXNzaW9uRGF0YSkge1xuICAgICAgdGV4dCA9IHJlcGxhY2VEb3VibGVDdXJseXModGV4dCwgc3VibWlzc2lvbkRhdGEpXG4gICAgfVxuXG4gICAgaWYgKG5vZGUuZm9ybWF0ICYgTm9kZUZvcm1hdC5JU19CT0xEKSB7XG4gICAgICB0ZXh0ID0gYDxzdHJvbmc+JHt0ZXh0fTwvc3Ryb25nPmBcbiAgICB9XG4gICAgaWYgKG5vZGUuZm9ybWF0ICYgTm9kZUZvcm1hdC5JU19JVEFMSUMpIHtcbiAgICAgIHRleHQgPSBgPGVtPiR7dGV4dH08L2VtPmBcbiAgICB9XG4gICAgaWYgKG5vZGUuZm9ybWF0ICYgTm9kZUZvcm1hdC5JU19TVFJJS0VUSFJPVUdIKSB7XG4gICAgICB0ZXh0ID0gYDxzcGFuIHN0eWxlPVwidGV4dC1kZWNvcmF0aW9uOiBsaW5lLXRocm91Z2hcIj4ke3RleHR9PC9zcGFuPmBcbiAgICB9XG4gICAgaWYgKG5vZGUuZm9ybWF0ICYgTm9kZUZvcm1hdC5JU19VTkRFUkxJTkUpIHtcbiAgICAgIHRleHQgPSBgPHNwYW4gc3R5bGU9XCJ0ZXh0LWRlY29yYXRpb246IHVuZGVybGluZVwiPiR7dGV4dH08L3NwYW4+YFxuICAgIH1cbiAgICBpZiAobm9kZS5mb3JtYXQgJiBOb2RlRm9ybWF0LklTX0NPREUpIHtcbiAgICAgIHRleHQgPSBgPGNvZGU+JHt0ZXh0fTwvY29kZT5gXG4gICAgfVxuICAgIGlmIChub2RlLmZvcm1hdCAmIE5vZGVGb3JtYXQuSVNfU1VCU0NSSVBUKSB7XG4gICAgICB0ZXh0ID0gYDxzdWI+JHt0ZXh0fTwvc3ViPmBcbiAgICB9XG4gICAgaWYgKG5vZGUuZm9ybWF0ICYgTm9kZUZvcm1hdC5JU19TVVBFUlNDUklQVCkge1xuICAgICAgdGV4dCA9IGA8c3VwPiR7dGV4dH08L3N1cD5gXG4gICAgfVxuXG4gICAgcmV0dXJuIHRleHRcbiAgfSxcbiAgbm9kZVR5cGVzOiBbJ3RleHQnXSxcbn1cbiJdLCJuYW1lcyI6WyJUZXh0SFRNTENvbnZlcnRlciIsImNvbnZlcnRlciIsIm5vZGUiLCJzdWJtaXNzaW9uRGF0YSIsInRleHQiLCJyZXBsYWNlRG91YmxlQ3VybHlzIiwiZm9ybWF0IiwiTm9kZUZvcm1hdCIsIklTX0JPTEQiLCJJU19JVEFMSUMiLCJJU19TVFJJS0VUSFJPVUdIIiwiSVNfVU5ERVJMSU5FIiwiSVNfQ09ERSIsIklTX1NVQlNDUklQVCIsIklTX1NVUEVSU0NSSVBUIiwibm9kZVR5cGVzIl0sIm1hcHBpbmdzIjoiOzs7OytCQUthQTs7O2VBQUFBOzs7cUNBSHVCOzRCQUNUO0FBRXBCLE1BQU1BLG9CQUF3QztJQUNuREMsV0FBVSxFQUFFQyxJQUFJLEVBQUVDLGNBQWMsRUFBRTtRQUNoQyxJQUFJQyxPQUFPRixLQUFLRSxJQUFJO1FBRXBCLElBQUlELGdCQUFnQjtZQUNsQkMsT0FBT0MsSUFBQUEsd0NBQW1CLEVBQUNELE1BQU1EO1FBQ25DO1FBRUEsSUFBSUQsS0FBS0ksTUFBTSxHQUFHQyxzQkFBVSxDQUFDQyxPQUFPLEVBQUU7WUFDcENKLE9BQU8sQ0FBQyxRQUFRLEVBQUVBLEtBQUssU0FBUyxDQUFDO1FBQ25DO1FBQ0EsSUFBSUYsS0FBS0ksTUFBTSxHQUFHQyxzQkFBVSxDQUFDRSxTQUFTLEVBQUU7WUFDdENMLE9BQU8sQ0FBQyxJQUFJLEVBQUVBLEtBQUssS0FBSyxDQUFDO1FBQzNCO1FBQ0EsSUFBSUYsS0FBS0ksTUFBTSxHQUFHQyxzQkFBVSxDQUFDRyxnQkFBZ0IsRUFBRTtZQUM3Q04sT0FBTyxDQUFDLDRDQUE0QyxFQUFFQSxLQUFLLE9BQU8sQ0FBQztRQUNyRTtRQUNBLElBQUlGLEtBQUtJLE1BQU0sR0FBR0Msc0JBQVUsQ0FBQ0ksWUFBWSxFQUFFO1lBQ3pDUCxPQUFPLENBQUMseUNBQXlDLEVBQUVBLEtBQUssT0FBTyxDQUFDO1FBQ2xFO1FBQ0EsSUFBSUYsS0FBS0ksTUFBTSxHQUFHQyxzQkFBVSxDQUFDSyxPQUFPLEVBQUU7WUFDcENSLE9BQU8sQ0FBQyxNQUFNLEVBQUVBLEtBQUssT0FBTyxDQUFDO1FBQy9CO1FBQ0EsSUFBSUYsS0FBS0ksTUFBTSxHQUFHQyxzQkFBVSxDQUFDTSxZQUFZLEVBQUU7WUFDekNULE9BQU8sQ0FBQyxLQUFLLEVBQUVBLEtBQUssTUFBTSxDQUFDO1FBQzdCO1FBQ0EsSUFBSUYsS0FBS0ksTUFBTSxHQUFHQyxzQkFBVSxDQUFDTyxjQUFjLEVBQUU7WUFDM0NWLE9BQU8sQ0FBQyxLQUFLLEVBQUVBLEtBQUssTUFBTSxDQUFDO1FBQzdCO1FBRUEsT0FBT0E7SUFDVDtJQUNBVyxXQUFXO1FBQUM7S0FBTztBQUNyQiJ9