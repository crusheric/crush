"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
function _export(target, all) {
    for(var name in all)Object.defineProperty(target, name, {
        enumerable: true,
        get: all[name]
    });
}
_export(exports, {
    ListHTMLConverter: function() {
        return ListHTMLConverter;
    },
    ListItemHTMLConverter: function() {
        return ListItemHTMLConverter;
    }
});
const _serializeLexical = require("../serializeLexical");
const ListHTMLConverter = {
    converter: async ({ converters, node, parent, submissionData })=>{
        const childrenText = await (0, _serializeLexical.convertLexicalNodesToHTML)({
            converters,
            lexicalNodes: node.children,
            parent: {
                ...node,
                parent
            },
            submissionData
        });
        return `<${node?.tag} class="${node?.listType}">${childrenText}</${node?.tag}>`;
    },
    nodeTypes: [
        'list'
    ]
};
const ListItemHTMLConverter = {
    converter: async ({ converters, node, parent })=>{
        const childrenText = await (0, _serializeLexical.convertLexicalNodesToHTML)({
            converters,
            lexicalNodes: node.children,
            parent: {
                ...node,
                parent
            }
        });
        if ('listType' in parent && parent?.listType === 'check') {
            return `<li aria-checked=${node.checked ? 'true' : 'false'} class="${'list-item-checkbox' + node.checked ? 'list-item-checkbox-checked' : 'list-item-checkbox-unchecked'}"
          role="checkbox"
          tabIndex=${-1}
          value=${node?.value}
      >
          {serializedChildren}
          </li>`;
        } else {
            return `<li value=${node?.value}>${childrenText}</li>`;
        }
    },
    nodeTypes: [
        'listitem'
    ]
};

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uL3NyYy91dGlsaXRpZXMvbGV4aWNhbC9jb252ZXJ0ZXJzL2xpc3QudHMiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHR5cGUgeyBIVE1MQ29udmVydGVyIH0gZnJvbSAnLi4vdHlwZXMnXG5cbmltcG9ydCB7IGNvbnZlcnRMZXhpY2FsTm9kZXNUb0hUTUwgfSBmcm9tICcuLi9zZXJpYWxpemVMZXhpY2FsJ1xuXG5leHBvcnQgY29uc3QgTGlzdEhUTUxDb252ZXJ0ZXI6IEhUTUxDb252ZXJ0ZXI8YW55PiA9IHtcbiAgY29udmVydGVyOiBhc3luYyAoeyBjb252ZXJ0ZXJzLCBub2RlLCBwYXJlbnQsIHN1Ym1pc3Npb25EYXRhIH0pID0+IHtcbiAgICBjb25zdCBjaGlsZHJlblRleHQgPSBhd2FpdCBjb252ZXJ0TGV4aWNhbE5vZGVzVG9IVE1MKHtcbiAgICAgIGNvbnZlcnRlcnMsXG4gICAgICBsZXhpY2FsTm9kZXM6IG5vZGUuY2hpbGRyZW4sXG4gICAgICBwYXJlbnQ6IHtcbiAgICAgICAgLi4ubm9kZSxcbiAgICAgICAgcGFyZW50LFxuICAgICAgfSxcbiAgICAgIHN1Ym1pc3Npb25EYXRhLFxuICAgIH0pXG5cbiAgICByZXR1cm4gYDwke25vZGU/LnRhZ30gY2xhc3M9XCIke25vZGU/Lmxpc3RUeXBlfVwiPiR7Y2hpbGRyZW5UZXh0fTwvJHtub2RlPy50YWd9PmBcbiAgfSxcbiAgbm9kZVR5cGVzOiBbJ2xpc3QnXSxcbn1cblxuZXhwb3J0IGNvbnN0IExpc3RJdGVtSFRNTENvbnZlcnRlcjogSFRNTENvbnZlcnRlcjxhbnk+ID0ge1xuICBjb252ZXJ0ZXI6IGFzeW5jICh7IGNvbnZlcnRlcnMsIG5vZGUsIHBhcmVudCB9KSA9PiB7XG4gICAgY29uc3QgY2hpbGRyZW5UZXh0ID0gYXdhaXQgY29udmVydExleGljYWxOb2Rlc1RvSFRNTCh7XG4gICAgICBjb252ZXJ0ZXJzLFxuICAgICAgbGV4aWNhbE5vZGVzOiBub2RlLmNoaWxkcmVuLFxuICAgICAgcGFyZW50OiB7XG4gICAgICAgIC4uLm5vZGUsXG4gICAgICAgIHBhcmVudCxcbiAgICAgIH0sXG4gICAgfSlcblxuICAgIGlmICgnbGlzdFR5cGUnIGluIHBhcmVudCAmJiBwYXJlbnQ/Lmxpc3RUeXBlID09PSAnY2hlY2snKSB7XG4gICAgICByZXR1cm4gYDxsaSBhcmlhLWNoZWNrZWQ9JHtub2RlLmNoZWNrZWQgPyAndHJ1ZScgOiAnZmFsc2UnfSBjbGFzcz1cIiR7XG4gICAgICAgICdsaXN0LWl0ZW0tY2hlY2tib3gnICsgbm9kZS5jaGVja2VkXG4gICAgICAgICAgPyAnbGlzdC1pdGVtLWNoZWNrYm94LWNoZWNrZWQnXG4gICAgICAgICAgOiAnbGlzdC1pdGVtLWNoZWNrYm94LXVuY2hlY2tlZCdcbiAgICAgIH1cIlxuICAgICAgICAgIHJvbGU9XCJjaGVja2JveFwiXG4gICAgICAgICAgdGFiSW5kZXg9JHstMX1cbiAgICAgICAgICB2YWx1ZT0ke25vZGU/LnZhbHVlfVxuICAgICAgPlxuICAgICAgICAgIHtzZXJpYWxpemVkQ2hpbGRyZW59XG4gICAgICAgICAgPC9saT5gXG4gICAgfSBlbHNlIHtcbiAgICAgIHJldHVybiBgPGxpIHZhbHVlPSR7bm9kZT8udmFsdWV9PiR7Y2hpbGRyZW5UZXh0fTwvbGk+YFxuICAgIH1cbiAgfSxcbiAgbm9kZVR5cGVzOiBbJ2xpc3RpdGVtJ10sXG59XG4iXSwibmFtZXMiOlsiTGlzdEhUTUxDb252ZXJ0ZXIiLCJMaXN0SXRlbUhUTUxDb252ZXJ0ZXIiLCJjb252ZXJ0ZXIiLCJjb252ZXJ0ZXJzIiwibm9kZSIsInBhcmVudCIsInN1Ym1pc3Npb25EYXRhIiwiY2hpbGRyZW5UZXh0IiwiY29udmVydExleGljYWxOb2Rlc1RvSFRNTCIsImxleGljYWxOb2RlcyIsImNoaWxkcmVuIiwidGFnIiwibGlzdFR5cGUiLCJub2RlVHlwZXMiLCJjaGVja2VkIiwidmFsdWUiXSwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7O0lBSWFBLGlCQUFpQjtlQUFqQkE7O0lBaUJBQyxxQkFBcUI7ZUFBckJBOzs7a0NBbkI2QjtBQUVuQyxNQUFNRCxvQkFBd0M7SUFDbkRFLFdBQVcsT0FBTyxFQUFFQyxVQUFVLEVBQUVDLElBQUksRUFBRUMsTUFBTSxFQUFFQyxjQUFjLEVBQUU7UUFDNUQsTUFBTUMsZUFBZSxNQUFNQyxJQUFBQSwyQ0FBeUIsRUFBQztZQUNuREw7WUFDQU0sY0FBY0wsS0FBS00sUUFBUTtZQUMzQkwsUUFBUTtnQkFDTixHQUFHRCxJQUFJO2dCQUNQQztZQUNGO1lBQ0FDO1FBQ0Y7UUFFQSxPQUFPLENBQUMsQ0FBQyxFQUFFRixNQUFNTyxJQUFJLFFBQVEsRUFBRVAsTUFBTVEsU0FBUyxFQUFFLEVBQUVMLGFBQWEsRUFBRSxFQUFFSCxNQUFNTyxJQUFJLENBQUMsQ0FBQztJQUNqRjtJQUNBRSxXQUFXO1FBQUM7S0FBTztBQUNyQjtBQUVPLE1BQU1aLHdCQUE0QztJQUN2REMsV0FBVyxPQUFPLEVBQUVDLFVBQVUsRUFBRUMsSUFBSSxFQUFFQyxNQUFNLEVBQUU7UUFDNUMsTUFBTUUsZUFBZSxNQUFNQyxJQUFBQSwyQ0FBeUIsRUFBQztZQUNuREw7WUFDQU0sY0FBY0wsS0FBS00sUUFBUTtZQUMzQkwsUUFBUTtnQkFDTixHQUFHRCxJQUFJO2dCQUNQQztZQUNGO1FBQ0Y7UUFFQSxJQUFJLGNBQWNBLFVBQVVBLFFBQVFPLGFBQWEsU0FBUztZQUN4RCxPQUFPLENBQUMsaUJBQWlCLEVBQUVSLEtBQUtVLE9BQU8sR0FBRyxTQUFTLFFBQVEsUUFBUSxFQUNqRSx1QkFBdUJWLEtBQUtVLE9BQU8sR0FDL0IsK0JBQ0EsK0JBQ0w7O21CQUVZLEVBQUUsQ0FBQyxFQUFFO2dCQUNSLEVBQUVWLE1BQU1XLE1BQU07OztlQUdmLENBQUM7UUFDWixPQUFPO1lBQ0wsT0FBTyxDQUFDLFVBQVUsRUFBRVgsTUFBTVcsTUFBTSxDQUFDLEVBQUVSLGFBQWEsS0FBSyxDQUFDO1FBQ3hEO0lBQ0Y7SUFDQU0sV0FBVztRQUFDO0tBQVc7QUFDekIifQ==