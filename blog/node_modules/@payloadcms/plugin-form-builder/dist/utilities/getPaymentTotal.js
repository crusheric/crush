"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
Object.defineProperty(exports, "getPaymentTotal", {
    enumerable: true,
    get: function() {
        return getPaymentTotal;
    }
});
const getPaymentTotal = (args)=>{
    const { basePrice = 0, fieldValues, priceConditions } = args;
    let total = basePrice;
    if (Array.isArray(priceConditions) && priceConditions.length > 0) {
        priceConditions.forEach((priceCondition)=>{
            const { condition, fieldToUse, operator, valueForCondition, valueForOperator, valueType } = priceCondition;
            const valueOfField = fieldValues?.[fieldToUse];
            if (valueOfField) {
                if (condition === 'hasValue' || condition === 'equals' && valueOfField === valueForCondition || condition === 'notEquals' && valueOfField !== valueForCondition) {
                    const valueToUse = Number(valueType === 'valueOfField' ? valueOfField : valueForOperator);
                    switch(operator){
                        case 'add':
                            {
                                total += valueToUse;
                                break;
                            }
                        case 'subtract':
                            {
                                total -= valueToUse;
                                break;
                            }
                        case 'multiply':
                            {
                                total *= valueToUse;
                                break;
                            }
                        case 'divide':
                            {
                                total /= valueToUse;
                                break;
                            }
                        default:
                            {
                                break;
                            }
                    }
                }
            }
        });
    }
    return total;
};

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy91dGlsaXRpZXMvZ2V0UGF5bWVudFRvdGFsLnRzIl0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB0eXBlIHsgRmllbGRWYWx1ZXMsIFBheW1lbnRGaWVsZCwgUHJpY2VDb25kaXRpb24gfSBmcm9tICcuLi90eXBlcydcblxuZXhwb3J0IGNvbnN0IGdldFBheW1lbnRUb3RhbCA9IChcbiAgYXJnczogUGFydGlhbDxQYXltZW50RmllbGQ+ICYge1xuICAgIGZpZWxkVmFsdWVzOiBGaWVsZFZhbHVlc1xuICB9LFxuKTogbnVtYmVyID0+IHtcbiAgY29uc3QgeyBiYXNlUHJpY2UgPSAwLCBmaWVsZFZhbHVlcywgcHJpY2VDb25kaXRpb25zIH0gPSBhcmdzXG5cbiAgbGV0IHRvdGFsID0gYmFzZVByaWNlXG5cbiAgaWYgKEFycmF5LmlzQXJyYXkocHJpY2VDb25kaXRpb25zKSAmJiBwcmljZUNvbmRpdGlvbnMubGVuZ3RoID4gMCkge1xuICAgIHByaWNlQ29uZGl0aW9ucy5mb3JFYWNoKChwcmljZUNvbmRpdGlvbjogUHJpY2VDb25kaXRpb24pID0+IHtcbiAgICAgIGNvbnN0IHsgY29uZGl0aW9uLCBmaWVsZFRvVXNlLCBvcGVyYXRvciwgdmFsdWVGb3JDb25kaXRpb24sIHZhbHVlRm9yT3BlcmF0b3IsIHZhbHVlVHlwZSB9ID1cbiAgICAgICAgcHJpY2VDb25kaXRpb25cblxuICAgICAgY29uc3QgdmFsdWVPZkZpZWxkID0gZmllbGRWYWx1ZXM/LltmaWVsZFRvVXNlXVxuXG4gICAgICBpZiAodmFsdWVPZkZpZWxkKSB7XG4gICAgICAgIGlmIChcbiAgICAgICAgICBjb25kaXRpb24gPT09ICdoYXNWYWx1ZScgfHxcbiAgICAgICAgICAoY29uZGl0aW9uID09PSAnZXF1YWxzJyAmJiB2YWx1ZU9mRmllbGQgPT09IHZhbHVlRm9yQ29uZGl0aW9uKSB8fFxuICAgICAgICAgIChjb25kaXRpb24gPT09ICdub3RFcXVhbHMnICYmIHZhbHVlT2ZGaWVsZCAhPT0gdmFsdWVGb3JDb25kaXRpb24pXG4gICAgICAgICkge1xuICAgICAgICAgIGNvbnN0IHZhbHVlVG9Vc2UgPSBOdW1iZXIodmFsdWVUeXBlID09PSAndmFsdWVPZkZpZWxkJyA/IHZhbHVlT2ZGaWVsZCA6IHZhbHVlRm9yT3BlcmF0b3IpXG4gICAgICAgICAgc3dpdGNoIChvcGVyYXRvcikge1xuICAgICAgICAgICAgY2FzZSAnYWRkJzoge1xuICAgICAgICAgICAgICB0b3RhbCArPSB2YWx1ZVRvVXNlXG4gICAgICAgICAgICAgIGJyZWFrXG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBjYXNlICdzdWJ0cmFjdCc6IHtcbiAgICAgICAgICAgICAgdG90YWwgLT0gdmFsdWVUb1VzZVxuICAgICAgICAgICAgICBicmVha1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgY2FzZSAnbXVsdGlwbHknOiB7XG4gICAgICAgICAgICAgIHRvdGFsICo9IHZhbHVlVG9Vc2VcbiAgICAgICAgICAgICAgYnJlYWtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGNhc2UgJ2RpdmlkZSc6IHtcbiAgICAgICAgICAgICAgdG90YWwgLz0gdmFsdWVUb1VzZVxuICAgICAgICAgICAgICBicmVha1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZGVmYXVsdDoge1xuICAgICAgICAgICAgICBicmVha1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfVxuICAgIH0pXG4gIH1cblxuICByZXR1cm4gdG90YWxcbn1cbiJdLCJuYW1lcyI6WyJnZXRQYXltZW50VG90YWwiLCJhcmdzIiwiYmFzZVByaWNlIiwiZmllbGRWYWx1ZXMiLCJwcmljZUNvbmRpdGlvbnMiLCJ0b3RhbCIsIkFycmF5IiwiaXNBcnJheSIsImxlbmd0aCIsImZvckVhY2giLCJwcmljZUNvbmRpdGlvbiIsImNvbmRpdGlvbiIsImZpZWxkVG9Vc2UiLCJvcGVyYXRvciIsInZhbHVlRm9yQ29uZGl0aW9uIiwidmFsdWVGb3JPcGVyYXRvciIsInZhbHVlVHlwZSIsInZhbHVlT2ZGaWVsZCIsInZhbHVlVG9Vc2UiLCJOdW1iZXIiXSwibWFwcGluZ3MiOiI7Ozs7K0JBRWFBOzs7ZUFBQUE7OztBQUFOLE1BQU1BLGtCQUFrQixDQUM3QkM7SUFJQSxNQUFNLEVBQUVDLFlBQVksQ0FBQyxFQUFFQyxXQUFXLEVBQUVDLGVBQWUsRUFBRSxHQUFHSDtJQUV4RCxJQUFJSSxRQUFRSDtJQUVaLElBQUlJLE1BQU1DLE9BQU8sQ0FBQ0gsb0JBQW9CQSxnQkFBZ0JJLE1BQU0sR0FBRyxHQUFHO1FBQ2hFSixnQkFBZ0JLLE9BQU8sQ0FBQyxDQUFDQztZQUN2QixNQUFNLEVBQUVDLFNBQVMsRUFBRUMsVUFBVSxFQUFFQyxRQUFRLEVBQUVDLGlCQUFpQixFQUFFQyxnQkFBZ0IsRUFBRUMsU0FBUyxFQUFFLEdBQ3ZGTjtZQUVGLE1BQU1PLGVBQWVkLGFBQWEsQ0FBQ1MsV0FBVztZQUU5QyxJQUFJSyxjQUFjO2dCQUNoQixJQUNFTixjQUFjLGNBQ2JBLGNBQWMsWUFBWU0saUJBQWlCSCxxQkFDM0NILGNBQWMsZUFBZU0saUJBQWlCSCxtQkFDL0M7b0JBQ0EsTUFBTUksYUFBYUMsT0FBT0gsY0FBYyxpQkFBaUJDLGVBQWVGO29CQUN4RSxPQUFRRjt3QkFDTixLQUFLOzRCQUFPO2dDQUNWUixTQUFTYTtnQ0FDVDs0QkFDRjt3QkFDQSxLQUFLOzRCQUFZO2dDQUNmYixTQUFTYTtnQ0FDVDs0QkFDRjt3QkFDQSxLQUFLOzRCQUFZO2dDQUNmYixTQUFTYTtnQ0FDVDs0QkFDRjt3QkFDQSxLQUFLOzRCQUFVO2dDQUNiYixTQUFTYTtnQ0FDVDs0QkFDRjt3QkFDQTs0QkFBUztnQ0FDUDs0QkFDRjtvQkFDRjtnQkFDRjtZQUNGO1FBQ0Y7SUFDRjtJQUVBLE9BQU9iO0FBQ1QifQ==