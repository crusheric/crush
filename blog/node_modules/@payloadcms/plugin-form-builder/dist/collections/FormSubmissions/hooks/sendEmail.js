"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
Object.defineProperty(exports, "default", {
    enumerable: true,
    get: function() {
        return _default;
    }
});
const _serializeLexical = require("../../../utilities/lexical/serializeLexical");
const _replaceDoubleCurlys = require("../../../utilities/replaceDoubleCurlys");
const _serializeSlate = require("../../../utilities/slate/serializeSlate");
const sendEmail = async (beforeChangeData, formConfig)=>{
    const { data, operation } = beforeChangeData;
    if (operation === 'create') {
        const { data: { id: formSubmissionID }, req: { locale, payload } } = beforeChangeData;
        const { form: formID, submissionData } = data || {};
        const { beforeEmail, formOverrides } = formConfig || {};
        try {
            const form = await payload.findByID({
                id: formID,
                collection: formOverrides?.slug || 'forms',
                locale
            });
            const { emails } = form;
            if (emails && emails.length) {
                const formattedEmails = await Promise.all(emails.map(async (email)=>{
                    const { bcc: emailBCC, cc: emailCC, emailFrom, emailTo, message, replyTo: emailReplyTo, subject } = email;
                    const to = (0, _replaceDoubleCurlys.replaceDoubleCurlys)(emailTo, submissionData);
                    const cc = emailCC ? (0, _replaceDoubleCurlys.replaceDoubleCurlys)(emailCC, submissionData) : '';
                    const bcc = emailBCC ? (0, _replaceDoubleCurlys.replaceDoubleCurlys)(emailBCC, submissionData) : '';
                    const from = (0, _replaceDoubleCurlys.replaceDoubleCurlys)(emailFrom, submissionData);
                    const replyTo = (0, _replaceDoubleCurlys.replaceDoubleCurlys)(emailReplyTo || emailFrom, submissionData);
                    const isLexical = message && !Array.isArray(message) && 'root' in message;
                    const serializedMessage = isLexical ? await (0, _serializeLexical.serializeLexical)(message, submissionData) : (0, _serializeSlate.serializeSlate)(message, submissionData);
                    return {
                        bcc,
                        cc,
                        from,
                        html: `<div>${serializedMessage}</div>`,
                        replyTo,
                        subject: (0, _replaceDoubleCurlys.replaceDoubleCurlys)(subject, submissionData),
                        to
                    };
                }));
                let emailsToSend = formattedEmails;
                if (typeof beforeEmail === 'function') {
                    emailsToSend = await beforeEmail(formattedEmails);
                }
                // const log = emailsToSend.map(({ html, ...rest }) => ({ ...rest }))
                await Promise.all(emailsToSend.map(async (email)=>{
                    const { to } = email;
                    try {
                        const emailPromise = await payload.sendEmail(email);
                        return emailPromise;
                    } catch (err) {
                        payload.logger.error({
                            err: `Error while sending email to address: ${to}. Email not sent: ${JSON.stringify(err)}`
                        });
                    }
                }));
            } else {
                payload.logger.info({
                    msg: 'No emails to send.'
                });
            }
        } catch (err) {
            const msg = `Error while sending one or more emails in form submission id: ${formSubmissionID}.`;
            payload.logger.error({
                err: msg
            });
        }
    }
    return data;
};
const _default = sendEmail;

//# sourceMappingURL=data:application/json;base64,