"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
Object.defineProperty(exports, "generateSubmissionCollection", {
    enumerable: true,
    get: function() {
        return generateSubmissionCollection;
    }
});
const _createCharge = /*#__PURE__*/ _interop_require_default(require("./hooks/createCharge"));
const _sendEmail = /*#__PURE__*/ _interop_require_default(require("./hooks/sendEmail"));
function _interop_require_default(obj) {
    return obj && obj.__esModule ? obj : {
        default: obj
    };
}
const generateSubmissionCollection = (formConfig)=>{
    const formSlug = formConfig?.formOverrides?.slug || 'forms';
    const newConfig = {
        ...formConfig?.formSubmissionOverrides || {},
        access: {
            create: ()=>true,
            read: ({ req: { user } })=>!!user,
            update: ()=>false,
            ...formConfig?.formSubmissionOverrides?.access || {}
        },
        admin: {
            ...formConfig?.formSubmissionOverrides?.admin || {},
            enableRichTextRelationship: false
        },
        fields: [
            {
                name: 'form',
                admin: {
                    readOnly: true
                },
                relationTo: formSlug,
                required: true,
                type: 'relationship',
                validate: async (value, { payload })=>{
                    /* Don't run in the client side */ if (!payload) return true;
                    if (payload) {
                        let existingForm;
                        try {
                            existingForm = await payload.findByID({
                                id: value,
                                collection: formSlug
                            });
                            return true;
                        } catch (error) {
                            return 'Cannot create this submission because this form does not exist.';
                        }
                    }
                }
            },
            {
                name: 'submissionData',
                admin: {
                    readOnly: true
                },
                fields: [
                    {
                        name: 'field',
                        required: true,
                        type: 'text'
                    },
                    {
                        name: 'value',
                        required: true,
                        type: 'text',
                        validate: (value)=>{
                            // TODO:
                            // create a validation function that dynamically
                            // relies on the field type and its options as configured.
                            // How to access sibling data from this field?
                            // Need the `name` of the field in order to validate it.
                            // Might not be possible to use this validation function.
                            // Instead, might need to do all validation in a `beforeValidate` collection hook.
                            if (typeof value !== 'undefined') {
                                return true;
                            }
                            return 'This field is required.';
                        }
                    }
                ],
                type: 'array'
            },
            ...formConfig?.formSubmissionOverrides?.fields || []
        ],
        hooks: {
            beforeChange: [
                (data)=>(0, _createCharge.default)(data, formConfig),
                (data)=>(0, _sendEmail.default)(data, formConfig),
                ...formConfig?.formSubmissionOverrides?.hooks?.beforeChange || []
            ],
            ...formConfig?.formSubmissionOverrides?.hooks || {}
        },
        slug: formConfig?.formSubmissionOverrides?.slug || 'form-submissions'
    };
    const paymentFieldConfig = formConfig?.fields?.payment;
    if (paymentFieldConfig) {
        newConfig.fields.push({
            name: 'payment',
            admin: {
                readOnly: true
            },
            fields: [
                {
                    name: 'field',
                    label: 'Field',
                    type: 'text'
                },
                {
                    name: 'status',
                    label: 'Status',
                    type: 'text'
                },
                {
                    name: 'amount',
                    admin: {
                        description: 'Amount in cents'
                    },
                    type: 'number'
                },
                {
                    name: 'paymentProcessor',
                    type: 'text'
                },
                {
                    name: 'creditCard',
                    fields: [
                        {
                            name: 'token',
                            label: 'token',
                            type: 'text'
                        },
                        {
                            name: 'brand',
                            label: 'Brand',
                            type: 'text'
                        },
                        {
                            name: 'number',
                            label: 'Number',
                            type: 'text'
                        }
                    ],
                    label: 'Credit Card',
                    type: 'group'
                }
            ],
            type: 'group'
        });
    }
    return newConfig;
};

//# sourceMappingURL=data:application/json;base64,