'use client';
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
Object.defineProperty(exports, "DynamicPriceSelector", {
    enumerable: true,
    get: function() {
        return DynamicPriceSelector;
    }
});
const _forms = require("payload/components/forms");
const _utilities = require("payload/components/utilities");
const _react = /*#__PURE__*/ _interop_require_wildcard(require("react"));
function _getRequireWildcardCache(nodeInterop) {
    if (typeof WeakMap !== "function") return null;
    var cacheBabelInterop = new WeakMap();
    var cacheNodeInterop = new WeakMap();
    return (_getRequireWildcardCache = function(nodeInterop) {
        return nodeInterop ? cacheNodeInterop : cacheBabelInterop;
    })(nodeInterop);
}
function _interop_require_wildcard(obj, nodeInterop) {
    if (!nodeInterop && obj && obj.__esModule) {
        return obj;
    }
    if (obj === null || typeof obj !== "object" && typeof obj !== "function") {
        return {
            default: obj
        };
    }
    var cache = _getRequireWildcardCache(nodeInterop);
    if (cache && cache.has(obj)) {
        return cache.get(obj);
    }
    var newObj = {};
    var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor;
    for(var key in obj){
        if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) {
            var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null;
            if (desc && (desc.get || desc.set)) {
                Object.defineProperty(newObj, key, desc);
            } else {
                newObj[key] = obj[key];
            }
        }
    }
    newObj.default = obj;
    if (cache) {
        cache.set(obj, newObj);
    }
    return newObj;
}
const DynamicPriceSelector = (props)=>{
    const { label, path } = props;
    const { fields, getData, getDataByPath } = (0, _forms.useWatchForm)();
    const locale = (0, _utilities.useLocale)();
    const [isNumberField, setIsNumberField] = (0, _react.useState)();
    const [valueType, setValueType] = (0, _react.useState)();
    // only number fields can use 'valueOfField`
    (0, _react.useEffect)(()=>{
        if (path) {
            const parentPath = path.split('.').slice(0, -1).join('.');
            const paymentFieldData = getDataByPath(parentPath);
            if (paymentFieldData) {
                const { fieldToUse, valueType } = paymentFieldData;
                setValueType(valueType);
                const { fields: allFields } = getData();
                const field = allFields.find((field)=>field.name === fieldToUse);
                if (field) {
                    const { blockType } = field;
                    setIsNumberField(blockType === 'number');
                }
            }
        }
    }, [
        fields,
        path,
        getDataByPath,
        getData
    ]);
    // TODO: make this a number field, block by Payload
    if (valueType === 'static') {
        return /*#__PURE__*/ _react.default.createElement(_forms.Text, props);
    }
    const localeCode = typeof locale === 'object' && 'code' in locale ? locale.code : locale;
    const localLabels = typeof label === 'object' ? label : {
        [localeCode]: label
    };
    const labelValue = localLabels[localeCode] || localLabels['en'] || '';
    if (valueType === 'valueOfField' && !isNumberField) {
        return /*#__PURE__*/ _react.default.createElement("div", null, /*#__PURE__*/ _react.default.createElement("div", null, labelValue), /*#__PURE__*/ _react.default.createElement("div", {
            style: {
                color: '#9A9A9A'
            }
        }, "The selected field must be a number field."));
    }
    return null;
};

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uLy4uL3NyYy9jb2xsZWN0aW9ucy9Gb3Jtcy9EeW5hbWljUHJpY2VTZWxlY3Rvci50c3giXSwic291cmNlc0NvbnRlbnQiOlsiJ3VzZSBjbGllbnQnXG5cbmltcG9ydCB0eXBlIHsgRGF0YSB9IGZyb20gJ3BheWxvYWQvZGlzdC9hZG1pbi9jb21wb25lbnRzL2Zvcm1zL0Zvcm0vdHlwZXMnXG5pbXBvcnQgdHlwZSB7IFByb3BzIGFzIFRleHRGaWVsZFR5cGUgfSBmcm9tICdwYXlsb2FkL2Rpc3QvYWRtaW4vY29tcG9uZW50cy9mb3Jtcy9maWVsZC10eXBlcy9UZXh0L3R5cGVzJ1xuXG5pbXBvcnQgeyBUZXh0LCB1c2VXYXRjaEZvcm0gfSBmcm9tICdwYXlsb2FkL2NvbXBvbmVudHMvZm9ybXMnXG5pbXBvcnQgeyB1c2VMb2NhbGUgfSBmcm9tICdwYXlsb2FkL2NvbXBvbmVudHMvdXRpbGl0aWVzJ1xuaW1wb3J0IFJlYWN0LCB7IHVzZUVmZmVjdCwgdXNlU3RhdGUgfSBmcm9tICdyZWFjdCdcblxudHlwZSBGaWVsZFdpdGhJRCA9IHtcbiAgaWQ6IHN0cmluZ1xuICBuYW1lOiBzdHJpbmdcbn1cblxuZXhwb3J0IGNvbnN0IER5bmFtaWNQcmljZVNlbGVjdG9yOiBSZWFjdC5GQzxUZXh0RmllbGRUeXBlPiA9IChwcm9wcykgPT4ge1xuICBjb25zdCB7IGxhYmVsLCBwYXRoIH0gPSBwcm9wc1xuXG4gIGNvbnN0IHsgZmllbGRzLCBnZXREYXRhLCBnZXREYXRhQnlQYXRoIH0gPSB1c2VXYXRjaEZvcm0oKVxuXG4gIGNvbnN0IGxvY2FsZSA9IHVzZUxvY2FsZSgpXG5cbiAgY29uc3QgW2lzTnVtYmVyRmllbGQsIHNldElzTnVtYmVyRmllbGRdID0gdXNlU3RhdGU8Ym9vbGVhbj4oKVxuICBjb25zdCBbdmFsdWVUeXBlLCBzZXRWYWx1ZVR5cGVdID0gdXNlU3RhdGU8J3N0YXRpYycgfCAndmFsdWVPZkZpZWxkJz4oKVxuXG4gIC8vIG9ubHkgbnVtYmVyIGZpZWxkcyBjYW4gdXNlICd2YWx1ZU9mRmllbGRgXG4gIHVzZUVmZmVjdCgoKSA9PiB7XG4gICAgaWYgKHBhdGgpIHtcbiAgICAgIGNvbnN0IHBhcmVudFBhdGggPSBwYXRoLnNwbGl0KCcuJykuc2xpY2UoMCwgLTEpLmpvaW4oJy4nKVxuICAgICAgY29uc3QgcGF5bWVudEZpZWxkRGF0YTogYW55ID0gZ2V0RGF0YUJ5UGF0aChwYXJlbnRQYXRoKVxuXG4gICAgICBpZiAocGF5bWVudEZpZWxkRGF0YSkge1xuICAgICAgICBjb25zdCB7IGZpZWxkVG9Vc2UsIHZhbHVlVHlwZSB9ID0gcGF5bWVudEZpZWxkRGF0YVxuXG4gICAgICAgIHNldFZhbHVlVHlwZSh2YWx1ZVR5cGUpXG5cbiAgICAgICAgY29uc3QgeyBmaWVsZHM6IGFsbEZpZWxkcyB9OiBEYXRhID0gZ2V0RGF0YSgpXG4gICAgICAgIGNvbnN0IGZpZWxkID0gYWxsRmllbGRzLmZpbmQoKGZpZWxkOiBGaWVsZFdpdGhJRCkgPT4gZmllbGQubmFtZSA9PT0gZmllbGRUb1VzZSlcblxuICAgICAgICBpZiAoZmllbGQpIHtcbiAgICAgICAgICBjb25zdCB7IGJsb2NrVHlwZSB9ID0gZmllbGRcbiAgICAgICAgICBzZXRJc051bWJlckZpZWxkKGJsb2NrVHlwZSA9PT0gJ251bWJlcicpXG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG4gIH0sIFtmaWVsZHMsIHBhdGgsIGdldERhdGFCeVBhdGgsIGdldERhdGFdKVxuXG4gIC8vIFRPRE86IG1ha2UgdGhpcyBhIG51bWJlciBmaWVsZCwgYmxvY2sgYnkgUGF5bG9hZFxuICBpZiAodmFsdWVUeXBlID09PSAnc3RhdGljJykge1xuICAgIHJldHVybiA8VGV4dCB7Li4ucHJvcHN9IC8+XG4gIH1cblxuICBjb25zdCBsb2NhbGVDb2RlID0gdHlwZW9mIGxvY2FsZSA9PT0gJ29iamVjdCcgJiYgJ2NvZGUnIGluIGxvY2FsZSA/IGxvY2FsZS5jb2RlIDogbG9jYWxlXG5cbiAgY29uc3QgbG9jYWxMYWJlbHMgPSB0eXBlb2YgbGFiZWwgPT09ICdvYmplY3QnID8gbGFiZWwgOiB7IFtsb2NhbGVDb2RlXTogbGFiZWwgfVxuICBjb25zdCBsYWJlbFZhbHVlID0gbG9jYWxMYWJlbHNbbG9jYWxlQ29kZV0gfHwgbG9jYWxMYWJlbHNbJ2VuJ10gfHwgJydcblxuICBpZiAodmFsdWVUeXBlID09PSAndmFsdWVPZkZpZWxkJyAmJiAhaXNOdW1iZXJGaWVsZCkge1xuICAgIHJldHVybiAoXG4gICAgICA8ZGl2PlxuICAgICAgICA8ZGl2PntsYWJlbFZhbHVlfTwvZGl2PlxuICAgICAgICA8ZGl2XG4gICAgICAgICAgc3R5bGU9e3tcbiAgICAgICAgICAgIGNvbG9yOiAnIzlBOUE5QScsXG4gICAgICAgICAgfX1cbiAgICAgICAgPlxuICAgICAgICAgIFRoZSBzZWxlY3RlZCBmaWVsZCBtdXN0IGJlIGEgbnVtYmVyIGZpZWxkLlxuICAgICAgICA8L2Rpdj5cbiAgICAgIDwvZGl2PlxuICAgIClcbiAgfVxuXG4gIHJldHVybiBudWxsXG59XG4iXSwibmFtZXMiOlsiRHluYW1pY1ByaWNlU2VsZWN0b3IiLCJwcm9wcyIsImxhYmVsIiwicGF0aCIsImZpZWxkcyIsImdldERhdGEiLCJnZXREYXRhQnlQYXRoIiwidXNlV2F0Y2hGb3JtIiwibG9jYWxlIiwidXNlTG9jYWxlIiwiaXNOdW1iZXJGaWVsZCIsInNldElzTnVtYmVyRmllbGQiLCJ1c2VTdGF0ZSIsInZhbHVlVHlwZSIsInNldFZhbHVlVHlwZSIsInVzZUVmZmVjdCIsInBhcmVudFBhdGgiLCJzcGxpdCIsInNsaWNlIiwiam9pbiIsInBheW1lbnRGaWVsZERhdGEiLCJmaWVsZFRvVXNlIiwiYWxsRmllbGRzIiwiZmllbGQiLCJmaW5kIiwibmFtZSIsImJsb2NrVHlwZSIsIlRleHQiLCJsb2NhbGVDb2RlIiwiY29kZSIsImxvY2FsTGFiZWxzIiwibGFiZWxWYWx1ZSIsImRpdiIsInN0eWxlIiwiY29sb3IiXSwibWFwcGluZ3MiOiJBQUFBOzs7OzsrQkFjYUE7OztlQUFBQTs7O3VCQVRzQjsyQkFDVDsrREFDaUI7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7QUFPcEMsTUFBTUEsdUJBQWdELENBQUNDO0lBQzVELE1BQU0sRUFBRUMsS0FBSyxFQUFFQyxJQUFJLEVBQUUsR0FBR0Y7SUFFeEIsTUFBTSxFQUFFRyxNQUFNLEVBQUVDLE9BQU8sRUFBRUMsYUFBYSxFQUFFLEdBQUdDLElBQUFBLG1CQUFZO0lBRXZELE1BQU1DLFNBQVNDLElBQUFBLG9CQUFTO0lBRXhCLE1BQU0sQ0FBQ0MsZUFBZUMsaUJBQWlCLEdBQUdDLElBQUFBLGVBQVE7SUFDbEQsTUFBTSxDQUFDQyxXQUFXQyxhQUFhLEdBQUdGLElBQUFBLGVBQVE7SUFFMUMsNENBQTRDO0lBQzVDRyxJQUFBQSxnQkFBUyxFQUFDO1FBQ1IsSUFBSVosTUFBTTtZQUNSLE1BQU1hLGFBQWFiLEtBQUtjLEtBQUssQ0FBQyxLQUFLQyxLQUFLLENBQUMsR0FBRyxDQUFDLEdBQUdDLElBQUksQ0FBQztZQUNyRCxNQUFNQyxtQkFBd0JkLGNBQWNVO1lBRTVDLElBQUlJLGtCQUFrQjtnQkFDcEIsTUFBTSxFQUFFQyxVQUFVLEVBQUVSLFNBQVMsRUFBRSxHQUFHTztnQkFFbENOLGFBQWFEO2dCQUViLE1BQU0sRUFBRVQsUUFBUWtCLFNBQVMsRUFBRSxHQUFTakI7Z0JBQ3BDLE1BQU1rQixRQUFRRCxVQUFVRSxJQUFJLENBQUMsQ0FBQ0QsUUFBdUJBLE1BQU1FLElBQUksS0FBS0o7Z0JBRXBFLElBQUlFLE9BQU87b0JBQ1QsTUFBTSxFQUFFRyxTQUFTLEVBQUUsR0FBR0g7b0JBQ3RCWixpQkFBaUJlLGNBQWM7Z0JBQ2pDO1lBQ0Y7UUFDRjtJQUNGLEdBQUc7UUFBQ3RCO1FBQVFEO1FBQU1HO1FBQWVEO0tBQVE7SUFFekMsbURBQW1EO0lBQ25ELElBQUlRLGNBQWMsVUFBVTtRQUMxQixxQkFBTyw2QkFBQ2MsV0FBSSxFQUFLMUI7SUFDbkI7SUFFQSxNQUFNMkIsYUFBYSxPQUFPcEIsV0FBVyxZQUFZLFVBQVVBLFNBQVNBLE9BQU9xQixJQUFJLEdBQUdyQjtJQUVsRixNQUFNc0IsY0FBYyxPQUFPNUIsVUFBVSxXQUFXQSxRQUFRO1FBQUUsQ0FBQzBCLFdBQVcsRUFBRTFCO0lBQU07SUFDOUUsTUFBTTZCLGFBQWFELFdBQVcsQ0FBQ0YsV0FBVyxJQUFJRSxXQUFXLENBQUMsS0FBSyxJQUFJO0lBRW5FLElBQUlqQixjQUFjLGtCQUFrQixDQUFDSCxlQUFlO1FBQ2xELHFCQUNFLDZCQUFDc0IsMkJBQ0MsNkJBQUNBLGFBQUtELDJCQUNOLDZCQUFDQztZQUNDQyxPQUFPO2dCQUNMQyxPQUFPO1lBQ1Q7V0FDRDtJQUtQO0lBRUEsT0FBTztBQUNUIn0=