"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
Object.defineProperty(exports, "default", {
    enumerable: true,
    get: function() {
        return _default;
    }
});
// This hook automatically re-saves a document after it is created
// so that we can build its breadcrumbs with the newly created document's ID.
const resaveSelfAfterCreate = (pluginConfig, collection)=>async ({ doc, operation, req })=>{
        const { locale, payload } = req;
        const breadcrumbSlug = pluginConfig.breadcrumbsFieldSlug || 'breadcrumbs';
        const breadcrumbs = doc[breadcrumbSlug];
        if (operation === 'create') {
            const originalDocWithDepth0 = await payload.findByID({
                id: doc.id,
                collection: collection.slug,
                depth: 0,
                req
            });
            const updateAsDraft = typeof collection.versions === 'object' && collection.versions.drafts && doc._status !== 'published';
            try {
                await payload.update({
                    id: doc.id,
                    collection: collection.slug,
                    data: {
                        ...originalDocWithDepth0,
                        [breadcrumbSlug]: breadcrumbs?.map((crumb, i)=>({
                                ...crumb,
                                doc: breadcrumbs.length === i + 1 ? doc.id : crumb.doc
                            })) || []
                    },
                    depth: 0,
                    draft: updateAsDraft,
                    locale,
                    req
                });
            } catch (err) {
                payload.logger.error(`Nested Docs plugin has had an error while adding breadcrumbs during document creation.`);
                payload.logger.error(err);
            }
        }
        return undefined;
    };
const _default = resaveSelfAfterCreate;

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9ob29rcy9yZXNhdmVTZWxmQWZ0ZXJDcmVhdGUudHMiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHR5cGUgeyBDb2xsZWN0aW9uQWZ0ZXJDaGFuZ2VIb29rLCBDb2xsZWN0aW9uQ29uZmlnIH0gZnJvbSAncGF5bG9hZC90eXBlcydcblxuaW1wb3J0IHR5cGUgeyBQbHVnaW5Db25maWcgfSBmcm9tICcuLi90eXBlcydcblxuLy8gVGhpcyBob29rIGF1dG9tYXRpY2FsbHkgcmUtc2F2ZXMgYSBkb2N1bWVudCBhZnRlciBpdCBpcyBjcmVhdGVkXG4vLyBzbyB0aGF0IHdlIGNhbiBidWlsZCBpdHMgYnJlYWRjcnVtYnMgd2l0aCB0aGUgbmV3bHkgY3JlYXRlZCBkb2N1bWVudCdzIElELlxuXG5jb25zdCByZXNhdmVTZWxmQWZ0ZXJDcmVhdGUgPVxuICAocGx1Z2luQ29uZmlnOiBQbHVnaW5Db25maWcsIGNvbGxlY3Rpb246IENvbGxlY3Rpb25Db25maWcpOiBDb2xsZWN0aW9uQWZ0ZXJDaGFuZ2VIb29rID0+XG4gIGFzeW5jICh7IGRvYywgb3BlcmF0aW9uLCByZXEgfSkgPT4ge1xuICAgIGNvbnN0IHsgbG9jYWxlLCBwYXlsb2FkIH0gPSByZXFcbiAgICBjb25zdCBicmVhZGNydW1iU2x1ZyA9IHBsdWdpbkNvbmZpZy5icmVhZGNydW1ic0ZpZWxkU2x1ZyB8fCAnYnJlYWRjcnVtYnMnXG4gICAgY29uc3QgYnJlYWRjcnVtYnMgPSBkb2NbYnJlYWRjcnVtYlNsdWddXG5cbiAgICBpZiAob3BlcmF0aW9uID09PSAnY3JlYXRlJykge1xuICAgICAgY29uc3Qgb3JpZ2luYWxEb2NXaXRoRGVwdGgwID0gYXdhaXQgcGF5bG9hZC5maW5kQnlJRCh7XG4gICAgICAgIGlkOiBkb2MuaWQsXG4gICAgICAgIGNvbGxlY3Rpb246IGNvbGxlY3Rpb24uc2x1ZyxcbiAgICAgICAgZGVwdGg6IDAsXG4gICAgICAgIHJlcSxcbiAgICAgIH0pXG5cbiAgICAgIGNvbnN0IHVwZGF0ZUFzRHJhZnQgPVxuICAgICAgICB0eXBlb2YgY29sbGVjdGlvbi52ZXJzaW9ucyA9PT0gJ29iamVjdCcgJiZcbiAgICAgICAgY29sbGVjdGlvbi52ZXJzaW9ucy5kcmFmdHMgJiZcbiAgICAgICAgZG9jLl9zdGF0dXMgIT09ICdwdWJsaXNoZWQnXG5cbiAgICAgIHRyeSB7XG4gICAgICAgIGF3YWl0IHBheWxvYWQudXBkYXRlKHtcbiAgICAgICAgICBpZDogZG9jLmlkLFxuICAgICAgICAgIGNvbGxlY3Rpb246IGNvbGxlY3Rpb24uc2x1ZyxcbiAgICAgICAgICBkYXRhOiB7XG4gICAgICAgICAgICAuLi5vcmlnaW5hbERvY1dpdGhEZXB0aDAsXG4gICAgICAgICAgICBbYnJlYWRjcnVtYlNsdWddOlxuICAgICAgICAgICAgICBicmVhZGNydW1icz8ubWFwKChjcnVtYiwgaSkgPT4gKHtcbiAgICAgICAgICAgICAgICAuLi5jcnVtYixcbiAgICAgICAgICAgICAgICBkb2M6IGJyZWFkY3J1bWJzLmxlbmd0aCA9PT0gaSArIDEgPyBkb2MuaWQgOiBjcnVtYi5kb2MsXG4gICAgICAgICAgICAgIH0pKSB8fCBbXSxcbiAgICAgICAgICB9LFxuICAgICAgICAgIGRlcHRoOiAwLFxuICAgICAgICAgIGRyYWZ0OiB1cGRhdGVBc0RyYWZ0LFxuICAgICAgICAgIGxvY2FsZSxcbiAgICAgICAgICByZXEsXG4gICAgICAgIH0pXG4gICAgICB9IGNhdGNoIChlcnI6IHVua25vd24pIHtcbiAgICAgICAgcGF5bG9hZC5sb2dnZXIuZXJyb3IoXG4gICAgICAgICAgYE5lc3RlZCBEb2NzIHBsdWdpbiBoYXMgaGFkIGFuIGVycm9yIHdoaWxlIGFkZGluZyBicmVhZGNydW1icyBkdXJpbmcgZG9jdW1lbnQgY3JlYXRpb24uYCxcbiAgICAgICAgKVxuICAgICAgICBwYXlsb2FkLmxvZ2dlci5lcnJvcihlcnIpXG4gICAgICB9XG4gICAgfVxuXG4gICAgcmV0dXJuIHVuZGVmaW5lZFxuICB9XG5cbmV4cG9ydCBkZWZhdWx0IHJlc2F2ZVNlbGZBZnRlckNyZWF0ZVxuIl0sIm5hbWVzIjpbInJlc2F2ZVNlbGZBZnRlckNyZWF0ZSIsInBsdWdpbkNvbmZpZyIsImNvbGxlY3Rpb24iLCJkb2MiLCJvcGVyYXRpb24iLCJyZXEiLCJsb2NhbGUiLCJwYXlsb2FkIiwiYnJlYWRjcnVtYlNsdWciLCJicmVhZGNydW1ic0ZpZWxkU2x1ZyIsImJyZWFkY3J1bWJzIiwib3JpZ2luYWxEb2NXaXRoRGVwdGgwIiwiZmluZEJ5SUQiLCJpZCIsInNsdWciLCJkZXB0aCIsInVwZGF0ZUFzRHJhZnQiLCJ2ZXJzaW9ucyIsImRyYWZ0cyIsIl9zdGF0dXMiLCJ1cGRhdGUiLCJkYXRhIiwibWFwIiwiY3J1bWIiLCJpIiwibGVuZ3RoIiwiZHJhZnQiLCJlcnIiLCJsb2dnZXIiLCJlcnJvciIsInVuZGVmaW5lZCJdLCJtYXBwaW5ncyI6Ijs7OzsrQkF1REE7OztlQUFBOzs7QUFuREEsa0VBQWtFO0FBQ2xFLDZFQUE2RTtBQUU3RSxNQUFNQSx3QkFDSixDQUFDQyxjQUE0QkMsYUFDN0IsT0FBTyxFQUFFQyxHQUFHLEVBQUVDLFNBQVMsRUFBRUMsR0FBRyxFQUFFO1FBQzVCLE1BQU0sRUFBRUMsTUFBTSxFQUFFQyxPQUFPLEVBQUUsR0FBR0Y7UUFDNUIsTUFBTUcsaUJBQWlCUCxhQUFhUSxvQkFBb0IsSUFBSTtRQUM1RCxNQUFNQyxjQUFjUCxHQUFHLENBQUNLLGVBQWU7UUFFdkMsSUFBSUosY0FBYyxVQUFVO1lBQzFCLE1BQU1PLHdCQUF3QixNQUFNSixRQUFRSyxRQUFRLENBQUM7Z0JBQ25EQyxJQUFJVixJQUFJVSxFQUFFO2dCQUNWWCxZQUFZQSxXQUFXWSxJQUFJO2dCQUMzQkMsT0FBTztnQkFDUFY7WUFDRjtZQUVBLE1BQU1XLGdCQUNKLE9BQU9kLFdBQVdlLFFBQVEsS0FBSyxZQUMvQmYsV0FBV2UsUUFBUSxDQUFDQyxNQUFNLElBQzFCZixJQUFJZ0IsT0FBTyxLQUFLO1lBRWxCLElBQUk7Z0JBQ0YsTUFBTVosUUFBUWEsTUFBTSxDQUFDO29CQUNuQlAsSUFBSVYsSUFBSVUsRUFBRTtvQkFDVlgsWUFBWUEsV0FBV1ksSUFBSTtvQkFDM0JPLE1BQU07d0JBQ0osR0FBR1YscUJBQXFCO3dCQUN4QixDQUFDSCxlQUFlLEVBQ2RFLGFBQWFZLElBQUksQ0FBQ0MsT0FBT0MsSUFBTyxDQUFBO2dDQUM5QixHQUFHRCxLQUFLO2dDQUNScEIsS0FBS08sWUFBWWUsTUFBTSxLQUFLRCxJQUFJLElBQUlyQixJQUFJVSxFQUFFLEdBQUdVLE1BQU1wQixHQUFHOzRCQUN4RCxDQUFBLE1BQU8sRUFBRTtvQkFDYjtvQkFDQVksT0FBTztvQkFDUFcsT0FBT1Y7b0JBQ1BWO29CQUNBRDtnQkFDRjtZQUNGLEVBQUUsT0FBT3NCLEtBQWM7Z0JBQ3JCcEIsUUFBUXFCLE1BQU0sQ0FBQ0MsS0FBSyxDQUNsQixDQUFDLHNGQUFzRixDQUFDO2dCQUUxRnRCLFFBQVFxQixNQUFNLENBQUNDLEtBQUssQ0FBQ0Y7WUFDdkI7UUFDRjtRQUVBLE9BQU9HO0lBQ1Q7TUFFRixXQUFlOUIifQ==