"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
Object.defineProperty(exports, "default", {
    enumerable: true,
    get: function() {
        return _default;
    }
});
const _populateBreadcrumbs = /*#__PURE__*/ _interop_require_default(require("../utilities/populateBreadcrumbs"));
function _interop_require_default(obj) {
    return obj && obj.__esModule ? obj : {
        default: obj
    };
}
const resave = async ({ collection, doc, draft, pluginConfig, req })=>{
    const parentSlug = pluginConfig?.parentFieldSlug || 'parent';
    const parentDocIsPublished = doc._status === 'published';
    const children = await req.payload.find({
        collection: collection.slug,
        depth: 0,
        draft,
        locale: req.locale,
        req,
        where: {
            [parentSlug]: {
                equals: doc.id
            }
        }
    });
    const breadcrumbSlug = pluginConfig.breadcrumbsFieldSlug || 'breadcrumbs';
    try {
        await children.docs.reduce(async (priorSave, child)=>{
            await priorSave;
            const childIsPublished = typeof collection.versions === 'object' && collection.versions.drafts && child._status === 'published';
            if (!parentDocIsPublished && childIsPublished) return;
            await req.payload.update({
                id: child.id,
                collection: collection.slug,
                data: {
                    ...child,
                    [breadcrumbSlug]: await (0, _populateBreadcrumbs.default)(req, pluginConfig, collection, child)
                },
                depth: 0,
                draft: !childIsPublished,
                locale: req.locale,
                req
            });
        }, Promise.resolve());
    } catch (err) {
        req.payload.logger.error(`Nested Docs plugin has had an error while re-saving a child document${draft ? ' as draft' : ' as published'}.`);
        req.payload.logger.error(err);
    }
};
const resaveChildren = (pluginConfig, collection)=>async ({ doc, req })=>{
        await resave({
            collection,
            doc,
            draft: true,
            pluginConfig,
            req
        });
        if (doc._status === 'published') {
            await resave({
                collection,
                doc,
                draft: false,
                pluginConfig,
                req
            });
        }
        return undefined;
    };
const _default = resaveChildren;

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9ob29rcy9yZXNhdmVDaGlsZHJlbi50cyJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgdHlwZSB7IENvbGxlY3Rpb25BZnRlckNoYW5nZUhvb2ssIENvbGxlY3Rpb25Db25maWcsIFBheWxvYWRSZXF1ZXN0IH0gZnJvbSAncGF5bG9hZC90eXBlcydcblxuaW1wb3J0IHR5cGUgeyBQbHVnaW5Db25maWcgfSBmcm9tICcuLi90eXBlcydcblxuaW1wb3J0IHBvcHVsYXRlQnJlYWRjcnVtYnMgZnJvbSAnLi4vdXRpbGl0aWVzL3BvcHVsYXRlQnJlYWRjcnVtYnMnXG5cbnR5cGUgUmVzYXZlQXJncyA9IHtcbiAgY29sbGVjdGlvbjogQ29sbGVjdGlvbkNvbmZpZ1xuICBkb2M6IFJlY29yZDxzdHJpbmcsIHVua25vd24+XG4gIGRyYWZ0OiBib29sZWFuXG4gIHBsdWdpbkNvbmZpZzogUGx1Z2luQ29uZmlnXG4gIHJlcTogUGF5bG9hZFJlcXVlc3Rcbn1cblxuY29uc3QgcmVzYXZlID0gYXN5bmMgKHsgY29sbGVjdGlvbiwgZG9jLCBkcmFmdCwgcGx1Z2luQ29uZmlnLCByZXEgfTogUmVzYXZlQXJncykgPT4ge1xuICBjb25zdCBwYXJlbnRTbHVnID0gcGx1Z2luQ29uZmlnPy5wYXJlbnRGaWVsZFNsdWcgfHwgJ3BhcmVudCdcbiAgY29uc3QgcGFyZW50RG9jSXNQdWJsaXNoZWQgPSBkb2MuX3N0YXR1cyA9PT0gJ3B1Ymxpc2hlZCdcblxuICBjb25zdCBjaGlsZHJlbiA9IGF3YWl0IHJlcS5wYXlsb2FkLmZpbmQoe1xuICAgIGNvbGxlY3Rpb246IGNvbGxlY3Rpb24uc2x1ZyxcbiAgICBkZXB0aDogMCxcbiAgICBkcmFmdCxcbiAgICBsb2NhbGU6IHJlcS5sb2NhbGUsXG4gICAgcmVxLFxuICAgIHdoZXJlOiB7XG4gICAgICBbcGFyZW50U2x1Z106IHtcbiAgICAgICAgZXF1YWxzOiBkb2MuaWQsXG4gICAgICB9LFxuICAgIH0sXG4gIH0pXG5cbiAgY29uc3QgYnJlYWRjcnVtYlNsdWcgPSBwbHVnaW5Db25maWcuYnJlYWRjcnVtYnNGaWVsZFNsdWcgfHwgJ2JyZWFkY3J1bWJzJ1xuXG4gIHRyeSB7XG4gICAgYXdhaXQgY2hpbGRyZW4uZG9jcy5yZWR1Y2UoYXN5bmMgKHByaW9yU2F2ZSwgY2hpbGQpID0+IHtcbiAgICAgIGF3YWl0IHByaW9yU2F2ZVxuXG4gICAgICBjb25zdCBjaGlsZElzUHVibGlzaGVkID1cbiAgICAgICAgdHlwZW9mIGNvbGxlY3Rpb24udmVyc2lvbnMgPT09ICdvYmplY3QnICYmXG4gICAgICAgIGNvbGxlY3Rpb24udmVyc2lvbnMuZHJhZnRzICYmXG4gICAgICAgIGNoaWxkLl9zdGF0dXMgPT09ICdwdWJsaXNoZWQnXG5cbiAgICAgIGlmICghcGFyZW50RG9jSXNQdWJsaXNoZWQgJiYgY2hpbGRJc1B1Ymxpc2hlZCkgcmV0dXJuXG5cbiAgICAgIGF3YWl0IHJlcS5wYXlsb2FkLnVwZGF0ZSh7XG4gICAgICAgIGlkOiBjaGlsZC5pZCxcbiAgICAgICAgY29sbGVjdGlvbjogY29sbGVjdGlvbi5zbHVnLFxuICAgICAgICBkYXRhOiB7XG4gICAgICAgICAgLi4uY2hpbGQsXG4gICAgICAgICAgW2JyZWFkY3J1bWJTbHVnXTogYXdhaXQgcG9wdWxhdGVCcmVhZGNydW1icyhyZXEsIHBsdWdpbkNvbmZpZywgY29sbGVjdGlvbiwgY2hpbGQpLFxuICAgICAgICB9LFxuICAgICAgICBkZXB0aDogMCxcbiAgICAgICAgZHJhZnQ6ICFjaGlsZElzUHVibGlzaGVkLFxuICAgICAgICBsb2NhbGU6IHJlcS5sb2NhbGUsXG4gICAgICAgIHJlcSxcbiAgICAgIH0pXG4gICAgfSwgUHJvbWlzZS5yZXNvbHZlKCkpXG4gIH0gY2F0Y2ggKGVycjogdW5rbm93bikge1xuICAgIHJlcS5wYXlsb2FkLmxvZ2dlci5lcnJvcihcbiAgICAgIGBOZXN0ZWQgRG9jcyBwbHVnaW4gaGFzIGhhZCBhbiBlcnJvciB3aGlsZSByZS1zYXZpbmcgYSBjaGlsZCBkb2N1bWVudCR7XG4gICAgICAgIGRyYWZ0ID8gJyBhcyBkcmFmdCcgOiAnIGFzIHB1Ymxpc2hlZCdcbiAgICAgIH0uYCxcbiAgICApXG4gICAgcmVxLnBheWxvYWQubG9nZ2VyLmVycm9yKGVycilcbiAgfVxufVxuXG5jb25zdCByZXNhdmVDaGlsZHJlbiA9XG4gIChwbHVnaW5Db25maWc6IFBsdWdpbkNvbmZpZywgY29sbGVjdGlvbjogQ29sbGVjdGlvbkNvbmZpZyk6IENvbGxlY3Rpb25BZnRlckNoYW5nZUhvb2sgPT5cbiAgYXN5bmMgKHsgZG9jLCByZXEgfSkgPT4ge1xuICAgIGF3YWl0IHJlc2F2ZSh7XG4gICAgICBjb2xsZWN0aW9uLFxuICAgICAgZG9jLFxuICAgICAgZHJhZnQ6IHRydWUsXG4gICAgICBwbHVnaW5Db25maWcsXG4gICAgICByZXEsXG4gICAgfSlcblxuICAgIGlmIChkb2MuX3N0YXR1cyA9PT0gJ3B1Ymxpc2hlZCcpIHtcbiAgICAgIGF3YWl0IHJlc2F2ZSh7XG4gICAgICAgIGNvbGxlY3Rpb24sXG4gICAgICAgIGRvYyxcbiAgICAgICAgZHJhZnQ6IGZhbHNlLFxuICAgICAgICBwbHVnaW5Db25maWcsXG4gICAgICAgIHJlcSxcbiAgICAgIH0pXG4gICAgfVxuXG4gICAgcmV0dXJuIHVuZGVmaW5lZFxuICB9XG5leHBvcnQgZGVmYXVsdCByZXNhdmVDaGlsZHJlblxuIl0sIm5hbWVzIjpbInJlc2F2ZSIsImNvbGxlY3Rpb24iLCJkb2MiLCJkcmFmdCIsInBsdWdpbkNvbmZpZyIsInJlcSIsInBhcmVudFNsdWciLCJwYXJlbnRGaWVsZFNsdWciLCJwYXJlbnREb2NJc1B1Ymxpc2hlZCIsIl9zdGF0dXMiLCJjaGlsZHJlbiIsInBheWxvYWQiLCJmaW5kIiwic2x1ZyIsImRlcHRoIiwibG9jYWxlIiwid2hlcmUiLCJlcXVhbHMiLCJpZCIsImJyZWFkY3J1bWJTbHVnIiwiYnJlYWRjcnVtYnNGaWVsZFNsdWciLCJkb2NzIiwicmVkdWNlIiwicHJpb3JTYXZlIiwiY2hpbGQiLCJjaGlsZElzUHVibGlzaGVkIiwidmVyc2lvbnMiLCJkcmFmdHMiLCJ1cGRhdGUiLCJkYXRhIiwicG9wdWxhdGVCcmVhZGNydW1icyIsIlByb21pc2UiLCJyZXNvbHZlIiwiZXJyIiwibG9nZ2VyIiwiZXJyb3IiLCJyZXNhdmVDaGlsZHJlbiIsInVuZGVmaW5lZCJdLCJtYXBwaW5ncyI6Ijs7OzsrQkEwRkE7OztlQUFBOzs7NEVBdEZnQzs7Ozs7O0FBVWhDLE1BQU1BLFNBQVMsT0FBTyxFQUFFQyxVQUFVLEVBQUVDLEdBQUcsRUFBRUMsS0FBSyxFQUFFQyxZQUFZLEVBQUVDLEdBQUcsRUFBYztJQUM3RSxNQUFNQyxhQUFhRixjQUFjRyxtQkFBbUI7SUFDcEQsTUFBTUMsdUJBQXVCTixJQUFJTyxPQUFPLEtBQUs7SUFFN0MsTUFBTUMsV0FBVyxNQUFNTCxJQUFJTSxPQUFPLENBQUNDLElBQUksQ0FBQztRQUN0Q1gsWUFBWUEsV0FBV1ksSUFBSTtRQUMzQkMsT0FBTztRQUNQWDtRQUNBWSxRQUFRVixJQUFJVSxNQUFNO1FBQ2xCVjtRQUNBVyxPQUFPO1lBQ0wsQ0FBQ1YsV0FBVyxFQUFFO2dCQUNaVyxRQUFRZixJQUFJZ0IsRUFBRTtZQUNoQjtRQUNGO0lBQ0Y7SUFFQSxNQUFNQyxpQkFBaUJmLGFBQWFnQixvQkFBb0IsSUFBSTtJQUU1RCxJQUFJO1FBQ0YsTUFBTVYsU0FBU1csSUFBSSxDQUFDQyxNQUFNLENBQUMsT0FBT0MsV0FBV0M7WUFDM0MsTUFBTUQ7WUFFTixNQUFNRSxtQkFDSixPQUFPeEIsV0FBV3lCLFFBQVEsS0FBSyxZQUMvQnpCLFdBQVd5QixRQUFRLENBQUNDLE1BQU0sSUFDMUJILE1BQU1mLE9BQU8sS0FBSztZQUVwQixJQUFJLENBQUNELHdCQUF3QmlCLGtCQUFrQjtZQUUvQyxNQUFNcEIsSUFBSU0sT0FBTyxDQUFDaUIsTUFBTSxDQUFDO2dCQUN2QlYsSUFBSU0sTUFBTU4sRUFBRTtnQkFDWmpCLFlBQVlBLFdBQVdZLElBQUk7Z0JBQzNCZ0IsTUFBTTtvQkFDSixHQUFHTCxLQUFLO29CQUNSLENBQUNMLGVBQWUsRUFBRSxNQUFNVyxJQUFBQSw0QkFBbUIsRUFBQ3pCLEtBQUtELGNBQWNILFlBQVl1QjtnQkFDN0U7Z0JBQ0FWLE9BQU87Z0JBQ1BYLE9BQU8sQ0FBQ3NCO2dCQUNSVixRQUFRVixJQUFJVSxNQUFNO2dCQUNsQlY7WUFDRjtRQUNGLEdBQUcwQixRQUFRQyxPQUFPO0lBQ3BCLEVBQUUsT0FBT0MsS0FBYztRQUNyQjVCLElBQUlNLE9BQU8sQ0FBQ3VCLE1BQU0sQ0FBQ0MsS0FBSyxDQUN0QixDQUFDLG9FQUFvRSxFQUNuRWhDLFFBQVEsY0FBYyxnQkFDdkIsQ0FBQyxDQUFDO1FBRUxFLElBQUlNLE9BQU8sQ0FBQ3VCLE1BQU0sQ0FBQ0MsS0FBSyxDQUFDRjtJQUMzQjtBQUNGO0FBRUEsTUFBTUcsaUJBQ0osQ0FBQ2hDLGNBQTRCSCxhQUM3QixPQUFPLEVBQUVDLEdBQUcsRUFBRUcsR0FBRyxFQUFFO1FBQ2pCLE1BQU1MLE9BQU87WUFDWEM7WUFDQUM7WUFDQUMsT0FBTztZQUNQQztZQUNBQztRQUNGO1FBRUEsSUFBSUgsSUFBSU8sT0FBTyxLQUFLLGFBQWE7WUFDL0IsTUFBTVQsT0FBTztnQkFDWEM7Z0JBQ0FDO2dCQUNBQyxPQUFPO2dCQUNQQztnQkFDQUM7WUFDRjtRQUNGO1FBRUEsT0FBT2dDO0lBQ1Q7TUFDRixXQUFlRCJ9