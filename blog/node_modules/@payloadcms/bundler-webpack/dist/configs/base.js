"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
Object.defineProperty(exports, "getBaseConfig", {
    enumerable: true,
    get: function() {
        return getBaseConfig;
    }
});
const _findnodemodules = /*#__PURE__*/ _interop_require_default(require("find-node-modules"));
const _fs = /*#__PURE__*/ _interop_require_default(require("fs"));
const _htmlwebpackplugin = /*#__PURE__*/ _interop_require_default(require("html-webpack-plugin"));
const _path = /*#__PURE__*/ _interop_require_default(require("path"));
const _webpack = /*#__PURE__*/ _interop_require_default(require("webpack"));
function _interop_require_default(obj) {
    return obj && obj.__esModule ? obj : {
        default: obj
    };
}
const mockModulePath = _path.default.resolve(__dirname, '../mocks/emptyModule.js');
const mockDotENVPath = _path.default.resolve(__dirname, '../mocks/dotENV.js');
const mockDBAdapterPath = _path.default.resolve(__dirname, '../mocks/db-adapters.js');
const nodeModulesPaths = (0, _findnodemodules.default)({
    cwd: process.cwd(),
    relative: false
});
const getBaseConfig = (payloadConfig)=>{
    let nodeModulesPath = nodeModulesPaths.find((p)=>{
        const guess = _path.default.resolve(p, 'payload/dist/admin');
        if (_fs.default.existsSync(guess)) {
            return true;
        }
        return false;
    });
    if (!nodeModulesPath) {
        nodeModulesPath = process.cwd();
    }
    const adminFolderPath = _path.default.resolve(nodeModulesPath, 'payload/dist/admin');
    const config = {
        entry: {
            main: [
                adminFolderPath
            ]
        },
        module: {
            rules: [
                {
                    exclude: /\/node_modules\/(?!.+\.tsx?$).*$/,
                    test: /\.(t|j)sx?$/,
                    use: [
                        {
                            loader: require.resolve('swc-loader'),
                            options: {
                                jsc: {
                                    parser: {
                                        syntax: 'typescript',
                                        tsx: true
                                    }
                                }
                            }
                        }
                    ]
                },
                {
                    oneOf: [
                        {
                            test: /\.(?:ico|gif|png|jpg|jpeg|woff(2)?|eot|ttf|otf|svg)$/i,
                            type: 'asset/resource'
                        }
                    ]
                }
            ]
        },
        plugins: [
            new _webpack.default.ProvidePlugin({
                process: require.resolve('process/browser')
            }),
            new _webpack.default.DefinePlugin(Object.entries(process.env).reduce((values, [key, val])=>{
                if (key.indexOf('PAYLOAD_PUBLIC_') === 0) {
                    return {
                        ...values,
                        [`process.env.${key}`]: `'${val}'`
                    };
                }
                return values;
            }, {})),
            new _htmlwebpackplugin.default({
                filename: _path.default.normalize('./index.html'),
                template: payloadConfig.admin.indexHTML
            })
        ],
        resolve: {
            alias: {
                '@payloadcms/bundler-webpack': mockModulePath,
                '@payloadcms/db-mongodb': mockDBAdapterPath,
                '@payloadcms/db-postgres': mockDBAdapterPath,
                dotenv: mockDotENVPath,
                path: require.resolve('path-browserify'),
                payload$: mockModulePath,
                'payload-config': payloadConfig.paths.rawConfig,
                'payload-user-css': payloadConfig.admin.css
            },
            extensions: [
                '.ts',
                '.tsx',
                '.js',
                '.json'
            ],
            fallback: {
                crypto: false,
                http: false,
                https: false
            },
            modules: [
                'node_modules',
                nodeModulesPath,
                _path.default.resolve(__dirname, '../../node_modules')
            ]
        }
    };
    return config;
};

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9jb25maWdzL2Jhc2UudHMiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHR5cGUgeyBTYW5pdGl6ZWRDb25maWcgfSBmcm9tICdwYXlsb2FkL2NvbmZpZydcbmltcG9ydCB0eXBlIHsgQ29uZmlndXJhdGlvbiB9IGZyb20gJ3dlYnBhY2snXG5cbmltcG9ydCBmaW5kTm9kZU1vZHVsZXMgZnJvbSAnZmluZC1ub2RlLW1vZHVsZXMnXG5pbXBvcnQgZnMgZnJvbSAnZnMnXG5pbXBvcnQgSHRtbFdlYnBhY2tQbHVnaW4gZnJvbSAnaHRtbC13ZWJwYWNrLXBsdWdpbidcbmltcG9ydCBwYXRoIGZyb20gJ3BhdGgnXG5pbXBvcnQgd2VicGFjayBmcm9tICd3ZWJwYWNrJ1xuXG5jb25zdCBtb2NrTW9kdWxlUGF0aCA9IHBhdGgucmVzb2x2ZShfX2Rpcm5hbWUsICcuLi9tb2Nrcy9lbXB0eU1vZHVsZS5qcycpXG5jb25zdCBtb2NrRG90RU5WUGF0aCA9IHBhdGgucmVzb2x2ZShfX2Rpcm5hbWUsICcuLi9tb2Nrcy9kb3RFTlYuanMnKVxuY29uc3QgbW9ja0RCQWRhcHRlclBhdGggPSBwYXRoLnJlc29sdmUoX19kaXJuYW1lLCAnLi4vbW9ja3MvZGItYWRhcHRlcnMuanMnKVxuXG5jb25zdCBub2RlTW9kdWxlc1BhdGhzID0gZmluZE5vZGVNb2R1bGVzKHsgY3dkOiBwcm9jZXNzLmN3ZCgpLCByZWxhdGl2ZTogZmFsc2UgfSlcblxuZXhwb3J0IGNvbnN0IGdldEJhc2VDb25maWcgPSAocGF5bG9hZENvbmZpZzogU2FuaXRpemVkQ29uZmlnKTogQ29uZmlndXJhdGlvbiA9PiB7XG4gIGxldCBub2RlTW9kdWxlc1BhdGggPSBub2RlTW9kdWxlc1BhdGhzLmZpbmQoKHApID0+IHtcbiAgICBjb25zdCBndWVzcyA9IHBhdGgucmVzb2x2ZShwLCAncGF5bG9hZC9kaXN0L2FkbWluJylcbiAgICBpZiAoZnMuZXhpc3RzU3luYyhndWVzcykpIHtcbiAgICAgIHJldHVybiB0cnVlXG4gICAgfVxuICAgIHJldHVybiBmYWxzZVxuICB9KVxuXG4gIGlmICghbm9kZU1vZHVsZXNQYXRoKSB7XG4gICAgbm9kZU1vZHVsZXNQYXRoID0gcHJvY2Vzcy5jd2QoKVxuICB9XG5cbiAgY29uc3QgYWRtaW5Gb2xkZXJQYXRoID0gcGF0aC5yZXNvbHZlKG5vZGVNb2R1bGVzUGF0aCwgJ3BheWxvYWQvZGlzdC9hZG1pbicpXG5cbiAgY29uc3QgY29uZmlnOiBDb25maWd1cmF0aW9uID0ge1xuICAgIGVudHJ5OiB7XG4gICAgICBtYWluOiBbYWRtaW5Gb2xkZXJQYXRoXSxcbiAgICB9LFxuICAgIG1vZHVsZToge1xuICAgICAgcnVsZXM6IFtcbiAgICAgICAge1xuICAgICAgICAgIGV4Y2x1ZGU6IC9cXC9ub2RlX21vZHVsZXNcXC8oPyEuK1xcLnRzeD8kKS4qJC8sXG4gICAgICAgICAgdGVzdDogL1xcLih0fGopc3g/JC8sXG4gICAgICAgICAgdXNlOiBbXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgIGxvYWRlcjogcmVxdWlyZS5yZXNvbHZlKCdzd2MtbG9hZGVyJyksXG4gICAgICAgICAgICAgIG9wdGlvbnM6IHtcbiAgICAgICAgICAgICAgICBqc2M6IHtcbiAgICAgICAgICAgICAgICAgIHBhcnNlcjoge1xuICAgICAgICAgICAgICAgICAgICBzeW50YXg6ICd0eXBlc2NyaXB0JyxcbiAgICAgICAgICAgICAgICAgICAgdHN4OiB0cnVlLFxuICAgICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgfSxcbiAgICAgICAgICBdLFxuICAgICAgICB9LFxuICAgICAgICB7XG4gICAgICAgICAgb25lT2Y6IFtcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgdGVzdDogL1xcLig/Omljb3xnaWZ8cG5nfGpwZ3xqcGVnfHdvZmYoMik/fGVvdHx0dGZ8b3RmfHN2ZykkL2ksXG4gICAgICAgICAgICAgIHR5cGU6ICdhc3NldC9yZXNvdXJjZScsXG4gICAgICAgICAgICB9LFxuICAgICAgICAgIF0sXG4gICAgICAgIH0sXG4gICAgICBdLFxuICAgIH0sXG4gICAgcGx1Z2luczogW1xuICAgICAgbmV3IHdlYnBhY2suUHJvdmlkZVBsdWdpbih7IHByb2Nlc3M6IHJlcXVpcmUucmVzb2x2ZSgncHJvY2Vzcy9icm93c2VyJykgfSksXG4gICAgICBuZXcgd2VicGFjay5EZWZpbmVQbHVnaW4oXG4gICAgICAgIE9iamVjdC5lbnRyaWVzKHByb2Nlc3MuZW52KS5yZWR1Y2UoKHZhbHVlcywgW2tleSwgdmFsXSkgPT4ge1xuICAgICAgICAgIGlmIChrZXkuaW5kZXhPZignUEFZTE9BRF9QVUJMSUNfJykgPT09IDApIHtcbiAgICAgICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICAgIC4uLnZhbHVlcyxcbiAgICAgICAgICAgICAgW2Bwcm9jZXNzLmVudi4ke2tleX1gXTogYCcke3ZhbH0nYCxcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9XG5cbiAgICAgICAgICByZXR1cm4gdmFsdWVzXG4gICAgICAgIH0sIHt9KSxcbiAgICAgICksXG4gICAgICBuZXcgSHRtbFdlYnBhY2tQbHVnaW4oe1xuICAgICAgICBmaWxlbmFtZTogcGF0aC5ub3JtYWxpemUoJy4vaW5kZXguaHRtbCcpLFxuICAgICAgICB0ZW1wbGF0ZTogcGF5bG9hZENvbmZpZy5hZG1pbi5pbmRleEhUTUwsXG4gICAgICB9KSxcbiAgICBdLFxuICAgIHJlc29sdmU6IHtcbiAgICAgIGFsaWFzOiB7XG4gICAgICAgICdAcGF5bG9hZGNtcy9idW5kbGVyLXdlYnBhY2snOiBtb2NrTW9kdWxlUGF0aCxcbiAgICAgICAgJ0BwYXlsb2FkY21zL2RiLW1vbmdvZGInOiBtb2NrREJBZGFwdGVyUGF0aCxcbiAgICAgICAgJ0BwYXlsb2FkY21zL2RiLXBvc3RncmVzJzogbW9ja0RCQWRhcHRlclBhdGgsXG4gICAgICAgIGRvdGVudjogbW9ja0RvdEVOVlBhdGgsXG4gICAgICAgIHBhdGg6IHJlcXVpcmUucmVzb2x2ZSgncGF0aC1icm93c2VyaWZ5JyksXG4gICAgICAgIHBheWxvYWQkOiBtb2NrTW9kdWxlUGF0aCxcbiAgICAgICAgJ3BheWxvYWQtY29uZmlnJzogcGF5bG9hZENvbmZpZy5wYXRocy5yYXdDb25maWcsXG4gICAgICAgICdwYXlsb2FkLXVzZXItY3NzJzogcGF5bG9hZENvbmZpZy5hZG1pbi5jc3MsXG4gICAgICB9LFxuICAgICAgZXh0ZW5zaW9uczogWycudHMnLCAnLnRzeCcsICcuanMnLCAnLmpzb24nXSxcbiAgICAgIGZhbGxiYWNrOiB7XG4gICAgICAgIGNyeXB0bzogZmFsc2UsXG4gICAgICAgIGh0dHA6IGZhbHNlLFxuICAgICAgICBodHRwczogZmFsc2UsXG4gICAgICB9LFxuICAgICAgbW9kdWxlczogWydub2RlX21vZHVsZXMnLCBub2RlTW9kdWxlc1BhdGgsIHBhdGgucmVzb2x2ZShfX2Rpcm5hbWUsICcuLi8uLi9ub2RlX21vZHVsZXMnKV0sXG4gICAgfSxcbiAgfVxuXG4gIHJldHVybiBjb25maWdcbn1cbiJdLCJuYW1lcyI6WyJnZXRCYXNlQ29uZmlnIiwibW9ja01vZHVsZVBhdGgiLCJwYXRoIiwicmVzb2x2ZSIsIl9fZGlybmFtZSIsIm1vY2tEb3RFTlZQYXRoIiwibW9ja0RCQWRhcHRlclBhdGgiLCJub2RlTW9kdWxlc1BhdGhzIiwiZmluZE5vZGVNb2R1bGVzIiwiY3dkIiwicHJvY2VzcyIsInJlbGF0aXZlIiwicGF5bG9hZENvbmZpZyIsIm5vZGVNb2R1bGVzUGF0aCIsImZpbmQiLCJwIiwiZ3Vlc3MiLCJmcyIsImV4aXN0c1N5bmMiLCJhZG1pbkZvbGRlclBhdGgiLCJjb25maWciLCJlbnRyeSIsIm1haW4iLCJtb2R1bGUiLCJydWxlcyIsImV4Y2x1ZGUiLCJ0ZXN0IiwidXNlIiwibG9hZGVyIiwicmVxdWlyZSIsIm9wdGlvbnMiLCJqc2MiLCJwYXJzZXIiLCJzeW50YXgiLCJ0c3giLCJvbmVPZiIsInR5cGUiLCJwbHVnaW5zIiwid2VicGFjayIsIlByb3ZpZGVQbHVnaW4iLCJEZWZpbmVQbHVnaW4iLCJPYmplY3QiLCJlbnRyaWVzIiwiZW52IiwicmVkdWNlIiwidmFsdWVzIiwia2V5IiwidmFsIiwiaW5kZXhPZiIsIkh0bWxXZWJwYWNrUGx1Z2luIiwiZmlsZW5hbWUiLCJub3JtYWxpemUiLCJ0ZW1wbGF0ZSIsImFkbWluIiwiaW5kZXhIVE1MIiwiYWxpYXMiLCJkb3RlbnYiLCJwYXlsb2FkJCIsInBhdGhzIiwicmF3Q29uZmlnIiwiY3NzIiwiZXh0ZW5zaW9ucyIsImZhbGxiYWNrIiwiY3J5cHRvIiwiaHR0cCIsImh0dHBzIiwibW9kdWxlcyJdLCJtYXBwaW5ncyI6Ijs7OzsrQkFlYUE7OztlQUFBQTs7O3dFQVplOzJEQUNiOzBFQUNlOzZEQUNiO2dFQUNHOzs7Ozs7QUFFcEIsTUFBTUMsaUJBQWlCQyxhQUFJLENBQUNDLE9BQU8sQ0FBQ0MsV0FBVztBQUMvQyxNQUFNQyxpQkFBaUJILGFBQUksQ0FBQ0MsT0FBTyxDQUFDQyxXQUFXO0FBQy9DLE1BQU1FLG9CQUFvQkosYUFBSSxDQUFDQyxPQUFPLENBQUNDLFdBQVc7QUFFbEQsTUFBTUcsbUJBQW1CQyxJQUFBQSx3QkFBZSxFQUFDO0lBQUVDLEtBQUtDLFFBQVFELEdBQUc7SUFBSUUsVUFBVTtBQUFNO0FBRXhFLE1BQU1YLGdCQUFnQixDQUFDWTtJQUM1QixJQUFJQyxrQkFBa0JOLGlCQUFpQk8sSUFBSSxDQUFDLENBQUNDO1FBQzNDLE1BQU1DLFFBQVFkLGFBQUksQ0FBQ0MsT0FBTyxDQUFDWSxHQUFHO1FBQzlCLElBQUlFLFdBQUUsQ0FBQ0MsVUFBVSxDQUFDRixRQUFRO1lBQ3hCLE9BQU87UUFDVDtRQUNBLE9BQU87SUFDVDtJQUVBLElBQUksQ0FBQ0gsaUJBQWlCO1FBQ3BCQSxrQkFBa0JILFFBQVFELEdBQUc7SUFDL0I7SUFFQSxNQUFNVSxrQkFBa0JqQixhQUFJLENBQUNDLE9BQU8sQ0FBQ1UsaUJBQWlCO0lBRXRELE1BQU1PLFNBQXdCO1FBQzVCQyxPQUFPO1lBQ0xDLE1BQU07Z0JBQUNIO2FBQWdCO1FBQ3pCO1FBQ0FJLFFBQVE7WUFDTkMsT0FBTztnQkFDTDtvQkFDRUMsU0FBUztvQkFDVEMsTUFBTTtvQkFDTkMsS0FBSzt3QkFDSDs0QkFDRUMsUUFBUUMsUUFBUTFCLE9BQU8sQ0FBQzs0QkFDeEIyQixTQUFTO2dDQUNQQyxLQUFLO29DQUNIQyxRQUFRO3dDQUNOQyxRQUFRO3dDQUNSQyxLQUFLO29DQUNQO2dDQUNGOzRCQUNGO3dCQUNGO3FCQUNEO2dCQUNIO2dCQUNBO29CQUNFQyxPQUFPO3dCQUNMOzRCQUNFVCxNQUFNOzRCQUNOVSxNQUFNO3dCQUNSO3FCQUNEO2dCQUNIO2FBQ0Q7UUFDSDtRQUNBQyxTQUFTO1lBQ1AsSUFBSUMsZ0JBQU8sQ0FBQ0MsYUFBYSxDQUFDO2dCQUFFN0IsU0FBU21CLFFBQVExQixPQUFPLENBQUM7WUFBbUI7WUFDeEUsSUFBSW1DLGdCQUFPLENBQUNFLFlBQVksQ0FDdEJDLE9BQU9DLE9BQU8sQ0FBQ2hDLFFBQVFpQyxHQUFHLEVBQUVDLE1BQU0sQ0FBQyxDQUFDQyxRQUFRLENBQUNDLEtBQUtDLElBQUk7Z0JBQ3BELElBQUlELElBQUlFLE9BQU8sQ0FBQyx1QkFBdUIsR0FBRztvQkFDeEMsT0FBTzt3QkFDTCxHQUFHSCxNQUFNO3dCQUNULENBQUMsQ0FBQyxZQUFZLEVBQUVDLElBQUksQ0FBQyxDQUFDLEVBQUUsQ0FBQyxDQUFDLEVBQUVDLElBQUksQ0FBQyxDQUFDO29CQUNwQztnQkFDRjtnQkFFQSxPQUFPRjtZQUNULEdBQUcsQ0FBQztZQUVOLElBQUlJLDBCQUFpQixDQUFDO2dCQUNwQkMsVUFBVWhELGFBQUksQ0FBQ2lELFNBQVMsQ0FBQztnQkFDekJDLFVBQVV4QyxjQUFjeUMsS0FBSyxDQUFDQyxTQUFTO1lBQ3pDO1NBQ0Q7UUFDRG5ELFNBQVM7WUFDUG9ELE9BQU87Z0JBQ0wsK0JBQStCdEQ7Z0JBQy9CLDBCQUEwQks7Z0JBQzFCLDJCQUEyQkE7Z0JBQzNCa0QsUUFBUW5EO2dCQUNSSCxNQUFNMkIsUUFBUTFCLE9BQU8sQ0FBQztnQkFDdEJzRCxVQUFVeEQ7Z0JBQ1Ysa0JBQWtCVyxjQUFjOEMsS0FBSyxDQUFDQyxTQUFTO2dCQUMvQyxvQkFBb0IvQyxjQUFjeUMsS0FBSyxDQUFDTyxHQUFHO1lBQzdDO1lBQ0FDLFlBQVk7Z0JBQUM7Z0JBQU87Z0JBQVE7Z0JBQU87YUFBUTtZQUMzQ0MsVUFBVTtnQkFDUkMsUUFBUTtnQkFDUkMsTUFBTTtnQkFDTkMsT0FBTztZQUNUO1lBQ0FDLFNBQVM7Z0JBQUM7Z0JBQWdCckQ7Z0JBQWlCWCxhQUFJLENBQUNDLE9BQU8sQ0FBQ0MsV0FBVzthQUFzQjtRQUMzRjtJQUNGO0lBRUEsT0FBT2dCO0FBQ1QifQ==